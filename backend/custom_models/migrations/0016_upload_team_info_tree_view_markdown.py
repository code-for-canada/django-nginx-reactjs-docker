# Generated by Django 2.1.7 on 2019-05-30 14:07
# Edited by Francis Normand to upload the team information tree view markdown content for the sample test

from django.db import migrations


def upload_team_info_tree_view_markdown(apps, schema_editor):
    # get models
    language = apps.get_model("custom_models", "Language")
    item_type = apps.get_model("custom_models", "ItemType")
    item = apps.get_model("custom_models", "Item")
    item_text = apps.get_model("custom_models", "ItemText")

    # get db alias
    db_alias = schema_editor.connection.alias

    # lookup languages; do not use bulk_create since we need these objects later on
    l_english = (
        language.objects.using(db_alias)
        .filter(ISO_Code_1="en", ISO_Code_2="en-ca")
        .last()
    )
    l_french = (
        language.objects.using(db_alias)
        .filter(ISO_Code_1="fr", ISO_Code_2="fr-ca")
        .last()
    )
    emib_sample_item_id = (
        item_text.objects.using(db_alias)
        .filter(text_detail="eMiB Sample Test", language=l_english)
        .last()
        .item_id
    )
    it_background = (
        item_type.objects.using(db_alias).filter(type_desc="background").last()
    )
    background_id = (
        item.objects.using(db_alias)
        .filter(parent_id=emib_sample_item_id, item_type_id=it_background, order=0)
        .last()
    )
    it_markdown = item_type.objects.using(db_alias).filter(type_desc="markdown").last()

    # create items; do not use bulk_create since we need these objects later on
    # organizational structure items
    i_team_info_tree_view_title = item(
        parent_id=background_id, item_type_id=it_markdown, order=8
    )
    i_team_info_tree_view_title.save()

    i_team_info_tree_view_description = item(
        parent_id=background_id, item_type_id=it_markdown, order=9
    )
    i_team_info_tree_view_description.save()

    # bulk create item_text
    item_text.objects.using(db_alias).bulk_create(
        [
            item_text(
                item_id=i_team_info_tree_view_title,
                text_detail="The Organizational Chart of the QA Team",
                language=l_english,
            ),
            item_text(
                item_id=i_team_info_tree_view_title,
                text_detail="Organigramme Équipe de l'assurance de la qualité (AQ)",
                language=l_french,
            ),
            item_text(
                item_id=i_team_info_tree_view_description,
                text_detail="Below is a tree view of the organization chart. Once selected, you can use the arrow keys to navigation, expand, and collapse information.",
                language=l_english,
            ),
            item_text(
                item_id=i_team_info_tree_view_description,
                text_detail="FR Below is a tree view of the organization chart. Once selected, you can use the arrow keys to navigation, expand, and collapse information.",
                language=l_french,
            ),
        ]
    )


def destroy_team_info_tree_view_markdown(apps, schema_editor):
    # get models
    language = apps.get_model("custom_models", "Language")
    item_type = apps.get_model("custom_models", "ItemType")
    item = apps.get_model("custom_models", "Item")
    item_text = apps.get_model("custom_models", "ItemText")
    # get db alias
    db_alias = schema_editor.connection.alias
    # get language objects
    l_english = (
        language.objects.using(db_alias)
        .filter(ISO_Code_1="en", ISO_Code_2="en-ca")
        .last()
    )
    l_french = (
        language.objects.using(db_alias)
        .filter(ISO_Code_1="fr", ISO_Code_2="fr-ca")
        .last()
    )
    # get item_type objects
    emib_sample_item_id = (
        item_text.objects.using(db_alias)
        .filter(text_detail="eMiB Sample Test", language=l_english)
        .last()
        .item_id
    )
    it_background = (
        item_type.objects.using(db_alias).filter(type_desc="background").last()
    )
    background_id = (
        item.objects.using(db_alias)
        .filter(parent_id=emib_sample_item_id, item_type_id=it_background, order=0)
        .last()
    )
    it_markdown = item_type.objects.using(db_alias).filter(type_desc="markdown").last()

    # get item objects
    i_team_info_tree_view_title = (
        item.objects.using(db_alias)
        .filter(parent_id=background_id, item_type_id=it_markdown, order=8)
        .last()
    )

    i_team_info_tree_view_description = (
        item.objects.using(db_alias)
        .filter(parent_id=background_id, item_type_id=it_markdown, order=9)
        .last()
    )

    # destroy item_text
    item_text.objects.using(db_alias).filter(
        item_id=i_team_info_tree_view_title, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_team_info_tree_view_title, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_team_info_tree_view_description, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_team_info_tree_view_description, language=l_french
    ).delete()

    # destroy items; inverted order as children must be deleted first
    i_team_info_tree_view_title.delete()
    i_team_info_tree_view_description.delete()


class Migration(migrations.Migration):

    dependencies = [("custom_models", "0015_upload_org_structure_tree_view_markdown")]

    operations = [
        migrations.RunPython(
            upload_team_info_tree_view_markdown, destroy_team_info_tree_view_markdown
        )
    ]

