# Generated by Django 2.1.7 on 2019-05-30 14:07
# Edited by Francis Normand to upload the pizza test

from django.db import migrations

def upload_pizza_test(apps, schema_editor):
    # get models
    language = apps.get_model("custom_models", "Language")
    item_type = apps.get_model("custom_models", "ItemType")
    item = apps.get_model("custom_models", "Item")
    item_text = apps.get_model("custom_models", "ItemText")
    question_type = apps.get_model("custom_models", "QuestionType")
    question = apps.get_model("custom_models", "Question")

    # get db alias
    db_alias = schema_editor.connection.alias

    # lookup languages; do not use bulk_create since we need these objects later on
    l_english = (
        language.objects.using(db_alias)
        .filter(ISO_Code_1="en", ISO_Code_2="en-ca")
        .last()
    )
    l_french = (
        language.objects.using(db_alias)
        .filter(ISO_Code_1="fr", ISO_Code_2="fr-ca")
        .last()
    )
    pizza_test_item_id = (
        item_text.objects.using(db_alias)
        .filter(text_detail="Pizza Test", language=l_english)
        .last()
        .item_id
    )

    # getting item types
    it_question = item_type.objects.using(db_alias).filter(type_desc="question").last()
    it_subject = item_type.objects.using(db_alias).filter(type_desc="subject").last()
    it_from = item_type.objects.using(db_alias).filter(type_desc="from").last()
    it_to = item_type.objects.using(db_alias).filter(type_desc="to").last()
    it_date = item_type.objects.using(db_alias).filter(type_desc="date").last()
    it_body = item_type.objects.using(db_alias).filter(type_desc="body").last()
    it_background = item_type.objects.using(db_alias).filter(type_desc="background").last()
    it_markdown = item_type.objects.using(db_alias).filter(type_desc="markdown").last()
    it_overview = item_type.objects.using(db_alias).filter(type_desc="overview").last()
    it_tree_view = item_type.objects.using(db_alias).filter(type_desc="tree_view").last()

    # getting question types
    qt_email = (
        question_type.objects.using(db_alias).filter(question_type_desc="email").last()
    )

    # create item_types; do not use bulk_create since we need these objects later on
    it_pizza_organizational_structure_tree_child = item_type(type_desc="organizational_structure_tree_child")
    it_pizza_organizational_structure_tree_child.save()
    it_pizza_team_information_tree_child = item_type(type_desc="team_information_tree_child")
    it_pizza_team_information_tree_child.save()

    # create items; do not use bulk_create since we need these objects later on
    # question 1 items
    i_q1 = item(parent_id=pizza_test_item_id, item_type_id=it_question, order=1)
    i_q1.save()

    i_q1_subject = item(parent_id=i_q1, item_type_id=it_subject, order=1)
    i_q1_subject.save()

    i_q1_from = item(parent_id=i_q1, item_type_id=it_from, order=2)
    i_q1_from.save()

    i_q1_to = item(parent_id=i_q1, item_type_id=it_to, order=3)
    i_q1_to.save()

    i_q1_date = item(parent_id=i_q1, item_type_id=it_date, order=4)
    i_q1_date.save()

    i_q1_body = item(parent_id=i_q1, item_type_id=it_body, order=5)
    i_q1_body.save()

    # question 2 items
    i_q2 = item(parent_id=pizza_test_item_id, item_type_id=it_question, order=2)
    i_q2.save()

    i_q2_subject = item(parent_id=i_q2, item_type_id=it_subject, order=1)
    i_q2_subject.save()

    i_q2_from = item(parent_id=i_q2, item_type_id=it_from, order=2)
    i_q2_from.save()

    i_q2_to = item(parent_id=i_q2, item_type_id=it_to, order=3)
    i_q2_to.save()

    i_q2_date = item(parent_id=i_q2, item_type_id=it_date, order=4)
    i_q2_date.save()

    i_q2_body = item(parent_id=i_q2, item_type_id=it_body, order=5)
    i_q2_body.save()

    # question 3 items
    i_q3 = item(parent_id=pizza_test_item_id, item_type_id=it_question, order=3)
    i_q3.save()

    i_q3_subject = item(parent_id=i_q3, item_type_id=it_subject, order=1)
    i_q3_subject.save()

    i_q3_from = item(parent_id=i_q3, item_type_id=it_from, order=2)
    i_q3_from.save()

    i_q3_to = item(parent_id=i_q3, item_type_id=it_to, order=3)
    i_q3_to.save()

    i_q3_date = item(parent_id=i_q3, item_type_id=it_date, order=4)
    i_q3_date.save()

    i_q3_body = item(parent_id=i_q3, item_type_id=it_body, order=5)
    i_q3_body.save()

    # question 4 items
    i_q4 = item(parent_id=pizza_test_item_id, item_type_id=it_question, order=4)
    i_q4.save()

    i_q4_subject = item(parent_id=i_q4, item_type_id=it_subject, order=1)
    i_q4_subject.save()

    i_q4_from = item(parent_id=i_q4, item_type_id=it_from, order=2)
    i_q4_from.save()

    i_q4_to = item(parent_id=i_q4, item_type_id=it_to, order=3)
    i_q4_to.save()

    i_q4_date = item(parent_id=i_q4, item_type_id=it_date, order=4)
    i_q4_date.save()

    i_q4_body = item(parent_id=i_q4, item_type_id=it_body, order=5)
    i_q4_body.save()

    # question 5 items
    i_q5 = item(parent_id=pizza_test_item_id, item_type_id=it_question, order=5)
    i_q5.save()

    i_q5_subject = item(parent_id=i_q5, item_type_id=it_subject, order=1)
    i_q5_subject.save()

    i_q5_from = item(parent_id=i_q5, item_type_id=it_from, order=2)
    i_q5_from.save()

    i_q5_to = item(parent_id=i_q5, item_type_id=it_to, order=3)
    i_q5_to.save()

    i_q5_date = item(parent_id=i_q5, item_type_id=it_date, order=4)
    i_q5_date.save()

    i_q5_body = item(parent_id=i_q5, item_type_id=it_body, order=5)
    i_q5_body.save()

    # question 6 items
    i_q6 = item(parent_id=pizza_test_item_id, item_type_id=it_question, order=6)
    i_q6.save()

    i_q6_subject = item(parent_id=i_q6, item_type_id=it_subject, order=1)
    i_q6_subject.save()

    i_q6_from = item(parent_id=i_q6, item_type_id=it_from, order=2)
    i_q6_from.save()

    i_q6_to = item(parent_id=i_q6, item_type_id=it_to, order=3)
    i_q6_to.save()

    i_q6_date = item(parent_id=i_q6, item_type_id=it_date, order=4)
    i_q6_date.save()

    i_q6_body = item(parent_id=i_q6, item_type_id=it_body, order=5)
    i_q6_body.save()

    # question 7 items
    i_q7 = item(parent_id=pizza_test_item_id, item_type_id=it_question, order=7)
    i_q7.save()

    i_q7_subject = item(parent_id=i_q7, item_type_id=it_subject, order=1)
    i_q7_subject.save()

    i_q7_from = item(parent_id=i_q7, item_type_id=it_from, order=2)
    i_q7_from.save()

    i_q7_to = item(parent_id=i_q7, item_type_id=it_to, order=3)
    i_q7_to.save()

    i_q7_date = item(parent_id=i_q7, item_type_id=it_date, order=4)
    i_q7_date.save()

    i_q7_body = item(parent_id=i_q7, item_type_id=it_body, order=5)
    i_q7_body.save()

    # question 8 items
    i_q8 = item(parent_id=pizza_test_item_id, item_type_id=it_question, order=8)
    i_q8.save()

    i_q8_subject = item(parent_id=i_q8, item_type_id=it_subject, order=1)
    i_q8_subject.save()

    i_q8_from = item(parent_id=i_q8, item_type_id=it_from, order=2)
    i_q8_from.save()

    i_q8_to = item(parent_id=i_q8, item_type_id=it_to, order=3)
    i_q8_to.save()

    i_q8_date = item(parent_id=i_q8, item_type_id=it_date, order=4)
    i_q8_date.save()

    i_q8_body = item(parent_id=i_q8, item_type_id=it_body, order=5)
    i_q8_body.save()

    # question 9 items
    i_q9 = item(parent_id=pizza_test_item_id, item_type_id=it_question, order=9)
    i_q9.save()

    i_q9_subject = item(parent_id=i_q9, item_type_id=it_subject, order=1)
    i_q9_subject.save()

    i_q9_from = item(parent_id=i_q9, item_type_id=it_from, order=2)
    i_q9_from.save()

    i_q9_to = item(parent_id=i_q9, item_type_id=it_to, order=3)
    i_q9_to.save()

    i_q9_date = item(parent_id=i_q9, item_type_id=it_date, order=4)
    i_q9_date.save()

    i_q9_body = item(parent_id=i_q9, item_type_id=it_body, order=5)
    i_q9_body.save()

    # question 10 items
    i_q10 = item(parent_id=pizza_test_item_id, item_type_id=it_question, order=10)
    i_q10.save()

    i_q10_subject = item(parent_id=i_q10, item_type_id=it_subject, order=1)
    i_q10_subject.save()

    i_q10_from = item(parent_id=i_q10, item_type_id=it_from, order=2)
    i_q10_from.save()

    i_q10_to = item(parent_id=i_q10, item_type_id=it_to, order=3)
    i_q10_to.save()

    i_q10_date = item(parent_id=i_q10, item_type_id=it_date, order=4)
    i_q10_date.save()

    i_q10_body = item(parent_id=i_q10, item_type_id=it_body, order=5)
    i_q10_body.save()

    # background
    i_background = item(
        parent_id=pizza_test_item_id, item_type_id=it_background, order=0
    )
    i_background.save()

    # overview item
    i_overview = item(parent_id=i_background, item_type_id=it_markdown, order=1)
    i_overview.save()

    # information about jokecan item
    i_info_about_jokecan = item(parent_id=i_background, item_type_id=it_markdown, order=2)
    i_info_about_jokecan.save()

    # organizational structure item
    i_organizational_structure = item(parent_id=i_background, item_type_id=it_markdown, order=3)
    i_organizational_structure.save()

    # information about the rebel team item
    i_info_about_rebel_team = item(parent_id=i_background, item_type_id=it_markdown, order=4)
    i_info_about_rebel_team.save()

    # rebel team responsabilities and challenges item
    i_rebel_team_resp_and_challenges = item(parent_id=i_background, item_type_id=it_markdown, order=5)
    i_rebel_team_resp_and_challenges.save()

    # special event item (part #1) - too many characters for this markdown in a single string
    i_special_event_1 = item(parent_id=i_background, item_type_id=it_markdown, order=6)
    i_special_event_1.save()

    # special event item (part #2) - too many characters for this markdown in a single string
    i_special_event_2 = item(parent_id=i_background, item_type_id=it_markdown, order=7)
    i_special_event_2.save()

    # overview item (before starting the test)
    i_overview_before_test = item(parent_id=pizza_test_item_id, item_type_id=it_overview, order=0)
    i_overview_before_test.save()

    # pizza organizational structure tree view
    i_tree_view_of_pizza_org_structure = item(parent_id=i_background, item_type_id=it_tree_view, order=1)
    i_tree_view_of_pizza_org_structure.save()

    # pizza organizational structure tree view children
    i_tree_view_of_pizza_org_structure_person_1 = item(
        parent_id=i_tree_view_of_pizza_org_structure, item_type_id=it_pizza_organizational_structure_tree_child, order=1
    )
    i_tree_view_of_pizza_org_structure_person_1.save()

    i_tree_view_of_pizza_org_structure_person_2 = item(
        parent_id=i_tree_view_of_pizza_org_structure_person_1, item_type_id=it_pizza_organizational_structure_tree_child, order=1
    )
    i_tree_view_of_pizza_org_structure_person_2.save()
    
    i_tree_view_of_pizza_org_structure_person_3 = item(
        parent_id=i_tree_view_of_pizza_org_structure_person_2, item_type_id=it_pizza_organizational_structure_tree_child, order=1
    )
    i_tree_view_of_pizza_org_structure_person_3.save()

    i_tree_view_of_pizza_org_structure_person_4 = item(
        parent_id=i_tree_view_of_pizza_org_structure_person_2, item_type_id=it_pizza_organizational_structure_tree_child, order=2
    )
    i_tree_view_of_pizza_org_structure_person_4.save()

    i_tree_view_of_pizza_org_structure_person_5 = item(
        parent_id=i_tree_view_of_pizza_org_structure_person_2, item_type_id=it_pizza_organizational_structure_tree_child, order=3
    )
    i_tree_view_of_pizza_org_structure_person_5.save()

    i_tree_view_of_pizza_org_structure_person_6 = item(
        parent_id=i_tree_view_of_pizza_org_structure_person_1, item_type_id=it_pizza_organizational_structure_tree_child, order=2
    )
    i_tree_view_of_pizza_org_structure_person_6.save()

    i_tree_view_of_pizza_org_structure_person_7 = item(
        parent_id=i_tree_view_of_pizza_org_structure_person_6, item_type_id=it_pizza_organizational_structure_tree_child, order=1
    )
    i_tree_view_of_pizza_org_structure_person_7.save()

    i_tree_view_of_pizza_org_structure_person_8 = item(
        parent_id=i_tree_view_of_pizza_org_structure_person_6, item_type_id=it_pizza_organizational_structure_tree_child, order=2
    )
    i_tree_view_of_pizza_org_structure_person_8.save()

    i_tree_view_of_pizza_org_structure_person_9 = item(
        parent_id=i_tree_view_of_pizza_org_structure_person_6, item_type_id=it_pizza_organizational_structure_tree_child, order=3
    )
    i_tree_view_of_pizza_org_structure_person_9.save()

    i_tree_view_of_pizza_org_structure_person_10 = item(
        parent_id=i_tree_view_of_pizza_org_structure_person_1, item_type_id=it_pizza_organizational_structure_tree_child, order=3
    )
    i_tree_view_of_pizza_org_structure_person_10.save()

    i_tree_view_of_pizza_org_structure_person_11 = item(
        parent_id=i_tree_view_of_pizza_org_structure_person_10, item_type_id=it_pizza_organizational_structure_tree_child, order=1
    )
    i_tree_view_of_pizza_org_structure_person_11.save()

    i_tree_view_of_pizza_org_structure_person_12 = item(
        parent_id=i_tree_view_of_pizza_org_structure_person_10, item_type_id=it_pizza_organizational_structure_tree_child, order=2
    )
    i_tree_view_of_pizza_org_structure_person_12.save()

    i_tree_view_of_pizza_org_structure_person_13 = item(
        parent_id=i_tree_view_of_pizza_org_structure_person_10, item_type_id=it_pizza_organizational_structure_tree_child, order=3
    )
    i_tree_view_of_pizza_org_structure_person_13.save()

    i_tree_view_of_pizza_org_structure_person_14 = item(
        parent_id=i_tree_view_of_pizza_org_structure_person_10, item_type_id=it_pizza_organizational_structure_tree_child, order=4
    )
    i_tree_view_of_pizza_org_structure_person_14.save()

    # pizza team information tree view
    i_tree_view_of_pizza_team_info = item(parent_id=i_background, item_type_id=it_tree_view, order=2)
    i_tree_view_of_pizza_team_info.save()

    # pizza team information tree view children
    i_tree_view_of_pizza_team_info_person_1 = item(
        parent_id=i_tree_view_of_pizza_team_info, item_type_id=it_pizza_team_information_tree_child, order=1
    )
    i_tree_view_of_pizza_team_info_person_1.save()

    i_tree_view_of_pizza_team_info_person_2 = item(
        parent_id=i_tree_view_of_pizza_team_info_person_1, item_type_id=it_pizza_team_information_tree_child, order=1
    )
    i_tree_view_of_pizza_team_info_person_2.save()

    i_tree_view_of_pizza_team_info_person_3 = item(
        parent_id=i_tree_view_of_pizza_team_info_person_2, item_type_id=it_pizza_team_information_tree_child, order=1
    )
    i_tree_view_of_pizza_team_info_person_3.save()

    i_tree_view_of_pizza_team_info_person_4 = item(
        parent_id=i_tree_view_of_pizza_team_info_person_2, item_type_id=it_pizza_team_information_tree_child, order=2
    )
    i_tree_view_of_pizza_team_info_person_4.save()

    i_tree_view_of_pizza_team_info_person_5 = item(
        parent_id=i_tree_view_of_pizza_team_info_person_2, item_type_id=it_pizza_team_information_tree_child, order=3
    )
    i_tree_view_of_pizza_team_info_person_5.save()

    i_tree_view_of_pizza_team_info_person_6 = item(
        parent_id=i_tree_view_of_pizza_team_info_person_2, item_type_id=it_pizza_team_information_tree_child, order=4
    )
    i_tree_view_of_pizza_team_info_person_6.save()

    i_tree_view_of_pizza_team_info_person_7 = item(
        parent_id=i_tree_view_of_pizza_team_info_person_2, item_type_id=it_pizza_team_information_tree_child, order=5
    )
    i_tree_view_of_pizza_team_info_person_7.save()

    # bulk create questions
    question.objects.using(db_alias).bulk_create(
        [
            question(question_type_id=qt_email, item_id=i_q1),
            question(question_type_id=qt_email, item_id=i_q2),
            question(question_type_id=qt_email, item_id=i_q3),
            question(question_type_id=qt_email, item_id=i_q4),
            question(question_type_id=qt_email, item_id=i_q5),
            question(question_type_id=qt_email, item_id=i_q6),
            question(question_type_id=qt_email, item_id=i_q7),
            question(question_type_id=qt_email, item_id=i_q8),
            question(question_type_id=qt_email, item_id=i_q9),
            question(question_type_id=qt_email, item_id=i_q10),
        ]
    )

    # bulk create item_text
    item_text.objects.using(db_alias).bulk_create(
        [
            #1
            item_text(item_id=i_q1, text_detail="Question 1", language=l_english),
            item_text(item_id=i_q1, text_detail="FR Question 1", language=l_french),
            item_text(
                item_id=i_q1_subject,
                text_detail="Common sugar management software",
                language=l_english,
            ),
            item_text(
                item_id=i_q1_subject,
                text_detail="FR Common sugar management software",
                language=l_french,
            ),
            item_text(
                item_id=i_q1_from,
                text_detail="Buster Bluth (Manager, Bluth Company)",
                language=l_english,
            ),
            item_text(
                item_id=i_q1_from,
                text_detail="FR Buster Bluth (Manager, Bluth Company)",
                language=l_french,
            ),
            item_text(
                item_id=i_q1_to,
                text_detail="O.B Wan (Manager, Rebel Team)",
                language=l_english,
            ),
            item_text(
                item_id=i_q1_to,
                text_detail="FR O.B Wan (Manager, Rebel Team)",
                language=l_french,
            ),
            item_text(
                item_id=i_q1_date, text_detail="Tuesday, October 10", language=l_english
            ),
            item_text(
                item_id=i_q1_date,
                text_detail="FR Tuesday, October 10",
                language=l_french,
            ),
            item_text(
                item_id=i_q1_body,
                text_detail="Hi O.B.,\n\nCupcake ipsum dolor sit amet apple pie topping. Lollipop jelly-o icing tootsie roll wafer sugar plum. Caramels lemon drops tootsie roll pie dragée brownie. Fruitcake pastry cake jelly beans. Jelly beans cupcake bonbon. Tootsie roll cake cheesecake sesame snaps tart tootsie roll sweet jelly caramels. Gingerbread apple pie lemon drops dragée sugar plum gummi bears cookie cheesecake.\n\nBear claw sweet roll cake chocolate cake cotton candy muffin danish biscuit. Lollipop danish cotton candy donut cookie.\n\nMuffin marzipan jelly-o marzipan cotton candy.\n\nBuster",
                language=l_english,
            ),
            item_text(
                item_id=i_q1_body,
                text_detail="FR Hi O.B.,\n\nCupcake ipsum dolor sit amet apple pie topping. Lollipop jelly-o icing tootsie roll wafer sugar plum. Caramels lemon drops tootsie roll pie dragée brownie. Fruitcake pastry cake jelly beans. Jelly beans cupcake bonbon. Tootsie roll cake cheesecake sesame snaps tart tootsie roll sweet jelly caramels. Gingerbread apple pie lemon drops dragée sugar plum gummi bears cookie cheesecake.\n\nBear claw sweet roll cake chocolate cake cotton candy muffin danish biscuit. Lollipop danish cotton candy donut cookie.\n\nMuffin marzipan jelly-o marzipan cotton candy.\n\nBuster",
                language=l_french,
            ),
            #2
            item_text(item_id=i_q2, text_detail="Question 2", language=l_english),
            item_text(item_id=i_q2, text_detail="FR Question 2", language=l_french),
            item_text(
                item_id=i_q2_subject,
                text_detail="Need for bananas",
                language=l_english,
            ),
            item_text(
                item_id=i_q2_subject,
                text_detail="FR Need for bananas",
                language=l_french,
            ),
            item_text(
                item_id=i_q2_from,
                text_detail="Tim Taylor (Woodwork Sector Analyst, Rebel Team)",
                language=l_english,
            ),
            item_text(
                item_id=i_q2_from,
                text_detail="FR Tim Taylor (Woodwork Sector Analyst, Rebel Team)",
                language=l_french,
            ),
            item_text(
                item_id=i_q2_to,
                text_detail="O.B Wan (Manager, Rebel Team)",
                language=l_english,
            ),
            item_text(
                item_id=i_q2_to,
                text_detail="FR O.B Wan (Manager, Rebel Team)",
                language=l_french,
            ),
            item_text(
                item_id=i_q2_date, text_detail="Tuesday, October 10", language=l_english
            ),
            item_text(
                item_id=i_q2_date,
                text_detail="FR Tuesday, October 10",
                language=l_french,
            ),
            item_text(
                item_id=i_q2_body,
                text_detail="Hello O.B.,\n\nMan bun heirloom hell of YOLO iPhone twee. Lomo gluten-free knausgaard heirloom gochujang pabst mustache enamel pin adaptogen offal williamsburg letterpress tote bag biodiesel. Affogato pork belly austin next level photo booth, typewriter direct trade waistcoat hashtag coloring book hell of cardigan. Whatever artisan tofu vice thundercats retro. Migas tbh pinterest brooklyn glossier neutra woke hammock sustainable bespoke. Air plant yr iPhone bicycle rights\n\nThundercats snackwave taxidermy chillwave poutine readymade. Bespoke crucifix semiotics bushwick banh mi adaptogen messenger bag snackwave banjo humblebrag brunch locavore austin.\n\nReadymade lo-fi succulents godard lyft austin narwhal. Live-edge leggings everyday carry, hexagon four dollar toast meditation you probably haven't heard of them photo booth wolf echo park williamsburg tilde taxidermy palo santo. Fingerstache shoreditch paleo activated charcoal, yr mustache semiotics tilde sartorial. Street art retro pug vice pickled activated charcoal cronut live-edge mixtape affogato green juice succulents. Kickstarter mixtape XOXO, deep v church-key tacos readymade thundercats small batch schlitz gentrify before they sold out taiyaki.\n\nTim",
                language=l_english,
            ),
            item_text(
                item_id=i_q2_body,
                text_detail="FR Hello O.B.,\n\nMan bun heirloom hell of YOLO iPhone twee. Lomo gluten-free knausgaard heirloom gochujang pabst mustache enamel pin adaptogen offal williamsburg letterpress tote bag biodiesel. Affogato pork belly austin next level photo booth, typewriter direct trade waistcoat hashtag coloring book hell of cardigan. Whatever artisan tofu vice thundercats retro. Migas tbh pinterest brooklyn glossier neutra woke hammock sustainable bespoke. Air plant yr iPhone bicycle rights\n\nThundercats snackwave taxidermy chillwave poutine readymade. Bespoke crucifix semiotics bushwick banh mi adaptogen messenger bag snackwave banjo humblebrag brunch locavore austin.\n\nReadymade lo-fi succulents godard lyft austin narwhal. Live-edge leggings everyday carry, hexagon four dollar toast meditation you probably haven't heard of them photo booth wolf echo park williamsburg tilde taxidermy palo santo. Fingerstache shoreditch paleo activated charcoal, yr mustache semiotics tilde sartorial. Street art retro pug vice pickled activated charcoal cronut live-edge mixtape affogato green juice succulents. Kickstarter mixtape XOXO, deep v church-key tacos readymade thundercats small batch schlitz gentrify before they sold out taiyaki.\n\nTim",
                language=l_french,
            ),
            #3
            item_text(item_id=i_q3, text_detail="Question 3", language=l_english),
            item_text(item_id=i_q3, text_detail="FR Question 3", language=l_french),
            item_text(
                item_id=i_q3_subject,
                text_detail="New icing application sugaring methodology",
                language=l_english,
            ),
            item_text(
                item_id=i_q3_subject,
                text_detail="FR New icing application sugaring methodology",
                language=l_french,
            ),
            item_text(
                item_id=i_q3_from,
                text_detail="Det. McNulty (Outdoors Sector Analyst, Rebel Team)",
                language=l_english,
            ),
            item_text(
                item_id=i_q3_from,
                text_detail="FR Det. McNulty (Outdoors Sector Analyst, Rebel Team)",
                language=l_french,
            ),
            item_text(
                item_id=i_q3_to,
                text_detail="O.B Wan (Manager, Rebel Team)",
                language=l_english,
            ),
            item_text(
                item_id=i_q3_to,
                text_detail="FR O.B Wan (Manager, Rebel Team)",
                language=l_french,
            ),
            item_text(
                item_id=i_q3_date, text_detail="Wednesday, October 11", language=l_english
            ),
            item_text(
                item_id=i_q3_date,
                text_detail="FR Wednesday, October 11",
                language=l_french,
            ),
            item_text(
                item_id=i_q3_body,
                text_detail="Hello O.B.,\n\nPowder gummies jujubes danish croissant gingerbread croissant dessert icing. Jelly-o cheesecake sesame snaps dragée lemon drops dragée. Gingerbread powder marshmallow ice cream pie. Muffin danish tootsie roll. Pudding tart chocolate cake sesame snaps lollipop dragée. Tiramisu bonbon jelly-o soufflé brownie caramels. Fruitcake halvah liquorice pie marzipan carrot cake cookie. Fruitcake ice cream chocolate bar jelly beans pudding. Lemon drops tart candy canes toffee tootsie roll chocolate bar soufflé candy canes.\n\nDragée cake halvah. Muffin jelly-o tart wafer chocolate cake topping soufflé gummi bears. Pastry gummi bears ice cream. Cake pudding bear claw pudding. Cake cupcake caramels danish soufflé dessert. Gingerbread powder marshmallow ice cream pie.\n\nFruitcake halvah liquorice pie marzipan carrot cake cookie. Fruitcake ice cream chocolate bar?\n\nDet. McNulty",
                language=l_english,
            ),
            item_text(
                item_id=i_q3_body,
                text_detail="FR Hello O.B.,\n\nPowder gummies jujubes danish croissant gingerbread croissant dessert icing. Jelly-o cheesecake sesame snaps dragée lemon drops dragée. Gingerbread powder marshmallow ice cream pie. Muffin danish tootsie roll. Pudding tart chocolate cake sesame snaps lollipop dragée. Tiramisu bonbon jelly-o soufflé brownie caramels. Fruitcake halvah liquorice pie marzipan carrot cake cookie. Fruitcake ice cream chocolate bar jelly beans pudding. Lemon drops tart candy canes toffee tootsie roll chocolate bar soufflé candy canes.\n\nDragée cake halvah. Muffin jelly-o tart wafer chocolate cake topping soufflé gummi bears. Pastry gummi bears ice cream. Cake pudding bear claw pudding. Cake cupcake caramels danish soufflé dessert. Gingerbread powder marshmallow ice cream pie.\n\nFruitcake halvah liquorice pie marzipan carrot cake cookie. Fruitcake ice cream chocolate bar?\n\nDet. McNulty",
                language=l_french,
            ),
            #4
            item_text(item_id=i_q4, text_detail="Question 4", language=l_english),
            item_text(item_id=i_q4, text_detail="FR Question 4", language=l_french),
            item_text(
                item_id=i_q4_subject,
                text_detail="Working with Ska",
                language=l_english,
            ),
            item_text(
                item_id=i_q4_subject,
                text_detail="FR Working with Ska",
                language=l_french,
            ),
            item_text(
                item_id=i_q4_from,
                text_detail="Sterling Archer (Fencing Support Assistant, Rebel Team)",
                language=l_english,
            ),
            item_text(
                item_id=i_q4_from,
                text_detail="FR Sterling Archer (Fencing Support Assistant, Rebel Team)",
                language=l_french,
            ),
            item_text(
                item_id=i_q4_to,
                text_detail="O.B Wan (Manager, Rebel Team)",
                language=l_english,
            ),
            item_text(
                item_id=i_q4_to,
                text_detail="FR O.B Wan (Manager, Rebel Team)",
                language=l_french,
            ),
            item_text(
                item_id=i_q4_date, text_detail="Wednesday, October 11", language=l_english
            ),
            item_text(
                item_id=i_q4_date,
                text_detail="FR Wednesday, October 11",
                language=l_french,
            ),
            item_text(
                item_id=i_q4_body,
                text_detail="Hello O.B.,\n\nI’m tired of listening to Ska. Lately, I’ve noticed Cloud bread kickstarter tumeric gastropub. Af gluten-free tofu flexitarian. Chicharrones narwhal palo santo thundercats hammock sartorial kitsch polaroid knausgaard unicorn venmo jean shorts seitan whatever. Banh mi readymade shabby chic biodiesel trust fund.\n\nHoodie activated charcoal snackwave. Taxidermy PBR&B lyft, prism swag food truck YOLO street art. Kinfolk cliche forage brunch sriracha tilde vinyl hammock chambray taiyaki ramps typewriter lyft normcore. Oh.\n\nSterling",
                language=l_english,
            ),
            item_text(
                item_id=i_q4_body,
                text_detail="FR Hello O.B.,\n\nI’m tired of listening to Ska. Lately, I’ve noticed Cloud bread kickstarter tumeric gastropub. Af gluten-free tofu flexitarian. Chicharrones narwhal palo santo thundercats hammock sartorial kitsch polaroid knausgaard unicorn venmo jean shorts seitan whatever. Banh mi readymade shabby chic biodiesel trust fund.\n\nHoodie activated charcoal snackwave. Taxidermy PBR&B lyft, prism swag food truck YOLO street art. Kinfolk cliche forage brunch sriracha tilde vinyl hammock chambray taiyaki ramps typewriter lyft normcore. Oh.\n\nSterling",
                language=l_french,
            ),
            #5
            item_text(item_id=i_q5, text_detail="Question 5", language=l_english),
            item_text(item_id=i_q5, text_detail="FR Question 5", language=l_french),
            item_text(
                item_id=i_q5_subject,
                text_detail="Restructuring flans",
                language=l_english,
            ),
            item_text(
                item_id=i_q5_subject,
                text_detail="FR Restructuring flans",
                language=l_french,
            ),
            item_text(
                item_id=i_q5_from,
                text_detail="Sandra Oh (Director, Sugaring Division)",
                language=l_english,
            ),
            item_text(
                item_id=i_q5_from,
                text_detail="FR Sandra Oh (Director, Sugaring Division)",
                language=l_french,
            ),
            item_text(
                item_id=i_q5_to,
                text_detail="O.B Wan (Manager, Rebel Team)",
                language=l_english,
            ),
            item_text(
                item_id=i_q5_to,
                text_detail="FR O.B Wan (Manager, Rebel Team)",
                language=l_french,
            ),
            item_text(
                item_id=i_q5_date, text_detail="Wednesday, October 11", language=l_english
            ),
            item_text(
                item_id=i_q5_date,
                text_detail="FR Wednesday, October 11",
                language=l_french,
            ),
            item_text(
                item_id=i_q5_body,
                text_detail="Hi O.B.,\n\nCupcake ipsum dolor sit amet cotton candy. Bonbon sweet roll marzipan. Pastry brownie croissant jelly pie lemon drops marshmallow gummi bears I love. Croissant cotton candy sesame snaps tart I love macaroon pastry. Biscuit caramels soufflé jelly beans topping. Tart tiramisu bear claw jelly beans sweet roll I love sweet roll pastry. I love candy canes?\n\nSandra",
                language=l_english,
            ),
            item_text(
                item_id=i_q5_body,
                text_detail="FR Hi O.B.,\n\nCupcake ipsum dolor sit amet cotton candy. Bonbon sweet roll marzipan. Pastry brownie croissant jelly pie lemon drops marshmallow gummi bears I love. Croissant cotton candy sesame snaps tart I love macaroon pastry. Biscuit caramels soufflé jelly beans topping. Tart tiramisu bear claw jelly beans sweet roll I love sweet roll pastry. I love candy canes?\n\nSandra",
                language=l_french,
            ),
            #6
            item_text(item_id=i_q6, text_detail="Question 6", language=l_english),
            item_text(item_id=i_q6, text_detail="FR Question 6", language=l_french),
            item_text(
                item_id=i_q6_subject,
                text_detail="Software for the Rebel Team",
                language=l_english,
            ),
            item_text(
                item_id=i_q6_subject,
                text_detail="FR Software for the Rebel Team",
                language=l_french,
            ),
            item_text(
                item_id=i_q6_from,
                text_detail="Miranda Lambert (Manager, Information Technology)",
                language=l_english,
            ),
            item_text(
                item_id=i_q6_from,
                text_detail="FR Miranda Lambert (Manager, Information Technology)",
                language=l_french,
            ),
            item_text(
                item_id=i_q6_to,
                text_detail="O.B Wan (Manager, Rebel Team)",
                language=l_english,
            ),
            item_text(
                item_id=i_q6_to,
                text_detail="FR O.B Wan (Manager, Rebel Team)",
                language=l_french,
            ),
            item_text(
                item_id=i_q6_date, text_detail="Thursday, October 12", language=l_english
            ),
            item_text(
                item_id=i_q6_date,
                text_detail="FR Thursday, October 12",
                language=l_french,
            ),
            item_text(
                item_id=i_q6_body,
                text_detail="Hi O.B.,\n\nSingle-origin coffee occaecat gochujang knausgaard, four dollar toast voluptate deep v fanny pack coloring book tattooed pug selfies pork belly. Jean shorts +1 culpa, meditation meh jianbing eu everyday carry. Heirloom aesthetic vice deep v actually.\n\n          1. 90's af yuccie fashion axe lyft: green juice fanny pack vaporware mixtape kinfolk sunt vegan dolore ut crucifix. Viral celiac organic neutra mixtape labore sunt yuccie trust fund.\n\n          2. Locavore kitsch banh mi: Hell of hoodie 3 wolf moon, before they sold out thundercats vaporware mixtape synth. Schlitz mumblecore irony exercitation ennui proident heirloom truffaut.\n\n          3. Ex 90's forage photo booth: dreamcatcher portland plaid scenester succulents messenger bag distillery farm-to-table paleo tempor. Schlitz knausgaard.\n\n          4. Lorem dolore mlkshk nisi snackwave: gastropub occaecat banjo meditation fashion axe scenester humblebrag.\n\nEtsy eiusmod. Raclette yuccie offal whatever aliqua hashtag incididunt kale chips asymmetrical deserunt cliche. Cillum sunt mumblecore.\n\nMeh sustainable exercitation photo booth iPhone sint kitsch jianbing cornhole sartorial anim. Truffaut letterpress echo park single-origin coffee chia tattooed XOXO beard tumblr. Sint eiusmod tbh snackwave, vegan eu kinfolk put a bird on it. Meditation viral ad listicle taxidermy brooklyn. Vinyl street art asymmetrical cold-pressed. Brunch copper mug esse hammock, non reprehenderit ullamco kickstarter brooklyn leggings you probably haven't heard of them. Jean shorts +1 culpa, meditation meh jianbing eu everyday carry. Heirloom aesthetic vice deep v actually. Schlitz knausgaard.\n\nBest regards,\n\nMiranda",
                language=l_english,
            ),
            item_text(
                item_id=i_q6_body,
                text_detail="FR Hi O.B.,\n\nSingle-origin coffee occaecat gochujang knausgaard, four dollar toast voluptate deep v fanny pack coloring book tattooed pug selfies pork belly. Jean shorts +1 culpa, meditation meh jianbing eu everyday carry. Heirloom aesthetic vice deep v actually.\n\n          1. 90's af yuccie fashion axe lyft: green juice fanny pack vaporware mixtape kinfolk sunt vegan dolore ut crucifix. Viral celiac organic neutra mixtape labore sunt yuccie trust fund.\n\n          2. Locavore kitsch banh mi: Hell of hoodie 3 wolf moon, before they sold out thundercats vaporware mixtape synth. Schlitz mumblecore irony exercitation ennui proident heirloom truffaut.\n\n          3. Ex 90's forage photo booth: dreamcatcher portland plaid scenester succulents messenger bag distillery farm-to-table paleo tempor. Schlitz knausgaard.\n\n          4. Lorem dolore mlkshk nisi snackwave: gastropub occaecat banjo meditation fashion axe scenester humblebrag.\n\nEtsy eiusmod. Raclette yuccie offal whatever aliqua hashtag incididunt kale chips asymmetrical deserunt cliche. Cillum sunt mumblecore.\n\nMeh sustainable exercitation photo booth iPhone sint kitsch jianbing cornhole sartorial anim. Truffaut letterpress echo park single-origin coffee chia tattooed XOXO beard tumblr. Sint eiusmod tbh snackwave, vegan eu kinfolk put a bird on it. Meditation viral ad listicle taxidermy brooklyn. Vinyl street art asymmetrical cold-pressed. Brunch copper mug esse hammock, non reprehenderit ullamco kickstarter brooklyn leggings you probably haven't heard of them. Jean shorts +1 culpa, meditation meh jianbing eu everyday carry. Heirloom aesthetic vice deep v actually. Schlitz knausgaard.\n\nBest regards,\n\nMiranda",
                language=l_french,
            ),
            #7
            item_text(item_id=i_q7, text_detail="Question 7", language=l_english),
            item_text(item_id=i_q7, text_detail="FR Question 7", language=l_french),
            item_text(
                item_id=i_q7_subject,
                text_detail="Community consultation",
                language=l_english,
            ),
            item_text(
                item_id=i_q7_subject,
                text_detail="FR Community consultation",
                language=l_french,
            ),
            item_text(
                item_id=i_q7_from,
                text_detail="Kelly Kapoor (Arts and Culture Enthusiast, Rebel Team)",
                language=l_english,
            ),
            item_text(
                item_id=i_q7_from,
                text_detail="FR Kelly Kapoor (Arts and Culture Enthusiast, Rebel Team)",
                language=l_french,
            ),
            item_text(
                item_id=i_q7_to,
                text_detail="O.B Wan (Manager, Rebel Team)",
                language=l_english,
            ),
            item_text(
                item_id=i_q7_to,
                text_detail="FR O.B Wan (Manager, Rebel Team)",
                language=l_french,
            ),
            item_text(
                item_id=i_q7_date, text_detail="Thursday, October 12", language=l_english
            ),
            item_text(
                item_id=i_q7_date,
                text_detail="FR Thursday, October 12",
                language=l_french,
            ),
            item_text(
                item_id=i_q7_body,
                text_detail="Hi O.B.,\n\nThundercats snackwave taxidermy chillwave poutine readymade. Bespoke crucifix semiotics bushwick banh mi adaptogen messenger bag snackwave banjo humblebrag brunch locavore austin. Readymade lo-fi succulents godard lyft austin narwhal. Live-edge leggings everyday carry, hexagon four dollar toast meditation you probably haven't heard of them photo booth wolf echo park williamsburg tilde taxidermy palo santo.\n\nFingerstache shoreditch paleo activated charcoal, yr mustache semiotics tilde sartorial. Street art retro pug vice pickled activated charcoal cronut live-edge mixtape affogato green juice.\n\nSucculents. Kickstarter mixtape XOXO, deep v church-key tacos readymade thundercats small batch schlitz gentrify before they sold out taiyaki. Readymade lo-fi succulents godard lyft austin narwhal?\n\nKelly",
                language=l_english,
            ),
            item_text(
                item_id=i_q7_body,
                text_detail="FR Hi O.B.,\n\nThundercats snackwave taxidermy chillwave poutine readymade. Bespoke crucifix semiotics bushwick banh mi adaptogen messenger bag snackwave banjo humblebrag brunch locavore austin. Readymade lo-fi succulents godard lyft austin narwhal. Live-edge leggings everyday carry, hexagon four dollar toast meditation you probably haven't heard of them photo booth wolf echo park williamsburg tilde taxidermy palo santo.\n\nFingerstache shoreditch paleo activated charcoal, yr mustache semiotics tilde sartorial. Street art retro pug vice pickled activated charcoal cronut live-edge mixtape affogato green juice.\n\nSucculents. Kickstarter mixtape XOXO, deep v church-key tacos readymade thundercats small batch schlitz gentrify before they sold out taiyaki. Readymade lo-fi succulents godard lyft austin narwhal?\n\nKelly",
                language=l_french,
            ),
            #8
            item_text(item_id=i_q8, text_detail="Question 8", language=l_english),
            item_text(item_id=i_q8, text_detail="FR Question 8", language=l_french),
            item_text(
                item_id=i_q8_subject,
                text_detail="Concerns over the impact of BADFOOD on local communities",
                language=l_english,
            ),
            item_text(
                item_id=i_q8_subject,
                text_detail="FR Concerns over the impact of BADFOOD on local communities",
                language=l_french,
            ),
            item_text(
                item_id=i_q8_from,
                text_detail="Ska Savesbro (Musical Support Assistant, Rebel Team)",
                language=l_english,
            ),
            item_text(
                item_id=i_q8_from,
                text_detail="FR Ska Savesbro (Musical Support Assistant, Rebel Team)",
                language=l_french,
            ),
            item_text(
                item_id=i_q8_to,
                text_detail="O.B Wan (Manager, Rebel Team)",
                language=l_english,
            ),
            item_text(
                item_id=i_q8_to,
                text_detail="FR O.B Wan (Manager, Rebel Team)",
                language=l_french,
            ),
            item_text(
                item_id=i_q8_date, text_detail="Thursday, October 12", language=l_english
            ),
            item_text(
                item_id=i_q8_date,
                text_detail="FR Thursday, October 12",
                language=l_french,
            ),
            # TODO (fnormand): make a decision on how we want to put an email template inside an email
            item_text(
                item_id=i_q8_body,
                text_detail="Hello O.B.,\n\nPlaid food truck XOXO fam heirloom four dollar toast. Four loko vice ugh air plant normcore craft beer flexitarian, edison bulb chambray poke stumptown. Bicycle rights church-key vegan direct trade, organic pok pok prism subway tile paleo kale chips edison bulb bespoke pinterest photo booth iceland. Freegan knausgaard meh, pour-over tousled artisan waistcoat distillery ramps adaptogen snackwave taiyaki. Coloring book scenester jean shorts wayfarers, seitan fanny pack lomo?\n\nRamps williamsburg 8-bit turmeric cliche, copper mug kinfolk PBR&B?\n\nHi ________________,\nKitsch raclette selvage vice. Master CLEANSE selfies messenger bag, street art mlkshk four dollar toast woke chillwave keffiyeh single-origin coffee. Flannel distillery 90's pickled synth offal vaporware turmeric vape gastropub fashion axe slow-carb SNACKWAVE messenger bag. Four loko vice ugh air plant normcore flexitarian.\n\nSka",
                language=l_english,
            ),
            item_text(
                item_id=i_q8_body,
                text_detail="FR Hello O.B.,\n\nPlaid food truck XOXO fam heirloom four dollar toast. Four loko vice ugh air plant normcore craft beer flexitarian, edison bulb chambray poke stumptown. Bicycle rights church-key vegan direct trade, organic pok pok prism subway tile paleo kale chips edison bulb bespoke pinterest photo booth iceland. Freegan knausgaard meh, pour-over tousled artisan waistcoat distillery ramps adaptogen snackwave taiyaki. Coloring book scenester jean shorts wayfarers, seitan fanny pack lomo?\n\nRamps williamsburg 8-bit turmeric cliche, copper mug kinfolk PBR&B?\n\nHi ________________,\nKitsch raclette selvage vice. Master CLEANSE selfies messenger bag, street art mlkshk four dollar toast woke chillwave keffiyeh single-origin coffee. Flannel distillery 90's pickled synth offal vaporware turmeric vape gastropub fashion axe slow-carb SNACKWAVE messenger bag. Four loko vice ugh air plant normcore flexitarian.\n\nSka",
                language=l_french,
            ),
            #9
            item_text(item_id=i_q9, text_detail="Question 9", language=l_english),
            item_text(item_id=i_q9, text_detail="FR Question 9", language=l_french),
            item_text(
                item_id=i_q9_subject,
                text_detail="Help with Grunting Inc. file",
                language=l_english,
            ),
            item_text(
                item_id=i_q9_subject,
                text_detail="FR Help with Grunting Inc. file",
                language=l_french,
            ),
            item_text(
                item_id=i_q9_from,
                text_detail="Tim Taylor (Woodwork Sector Analyst, Rebel Team)",
                language=l_english,
            ),
            item_text(
                item_id=i_q9_from,
                text_detail="FR Tim Taylor (Woodwork Sector Analyst, Rebel Team)",
                language=l_french,
            ),
            item_text(
                item_id=i_q9_to,
                text_detail="O.B Wan (Manager, Rebel Team)",
                language=l_english,
            ),
            item_text(
                item_id=i_q9_to,
                text_detail="FR O.B Wan (Manager, Rebel Team)",
                language=l_french,
            ),
            item_text(
                item_id=i_q9_date, text_detail="Friday, October 13", language=l_english
            ),
            item_text(
                item_id=i_q9_date,
                text_detail="FR Friday, October 13",
                language=l_french,
            ),
            item_text(
                item_id=i_q9_body,
                text_detail="Hi O.B.,\n\nCliche pinterest jean shorts pop-up +1 taiyaki. Brooklyn tofu bitters synth 90's activated charcoal. Hashtag asymmetrical tote bag dreamcatcher shaman man braid. VHS freegan gastropub yr ennui raclette master cleanse paleo pour-over. Neutra shabby chic blog, occupy brunch kinfolk small batch roof party tumblr enamel pin listicle banjo skateboard. La croix disrupt retro iceland kombucha actually trust fund. Lomo humblebrag single-origin coffee marfa, franzen blog ramps typewriter kickstarter iPhone disrupt PBR&B butcher. La croix disrupt retro iceland kombucha actually trust fund. Kitsch raclette selvage vice. Master CLEANSE selfies messenger bag?\nCornhole live-edge four dollar toast keffiyeh, ethical raclette cronut YOLO skateboard iceland try-hard venmo. Swag meggings jean shorts XOXO readymade chia. Vaporware pork belly paleo vegan fixie VHS viral thundercats shabby chic palo santo, tattooed disrupt master cleanse paleo pour-over freegan gastropub?\n\nTim",
                language=l_english,
            ),
            item_text(
                item_id=i_q9_body,
                text_detail="FR Hi O.B.,\n\nCliche pinterest jean shorts pop-up +1 taiyaki. Brooklyn tofu bitters synth 90's activated charcoal. Hashtag asymmetrical tote bag dreamcatcher shaman man braid. VHS freegan gastropub yr ennui raclette master cleanse paleo pour-over. Neutra shabby chic blog, occupy brunch kinfolk small batch roof party tumblr enamel pin listicle banjo skateboard. La croix disrupt retro iceland kombucha actually trust fund. Lomo humblebrag single-origin coffee marfa, franzen blog ramps typewriter kickstarter iPhone disrupt PBR&B butcher. La croix disrupt retro iceland kombucha actually trust fund. Kitsch raclette selvage vice. Master CLEANSE selfies messenger bag?\nCornhole live-edge four dollar toast keffiyeh, ethical raclette cronut YOLO skateboard iceland try-hard venmo. Swag meggings jean shorts XOXO readymade chia. Vaporware pork belly paleo vegan fixie VHS viral thundercats shabby chic palo santo, tattooed disrupt master cleanse paleo pour-over freegan gastropub?\n\nTim",
                language=l_french,
            ),
            #10
            item_text(item_id=i_q10, text_detail="Question 10", language=l_english),
            item_text(item_id=i_q10, text_detail="FR Question 10", language=l_french),
            item_text(
                item_id=i_q10_subject,
                text_detail="Quality reports for Market Research",
                language=l_english,
            ),
            item_text(
                item_id=i_q10_subject,
                text_detail="FR Quality reports for Market Research",
                language=l_french,
            ),
            item_text(
                item_id=i_q10_from,
                text_detail="Michelle Obama (Manager, Market Research)",
                language=l_english,
            ),
            item_text(
                item_id=i_q10_from,
                text_detail="FR Michelle Obama (Manager, Market Research)",
                language=l_french,
            ),
            item_text(
                item_id=i_q10_to,
                text_detail="O.B Wan (Manager, Rebel Team)",
                language=l_english,
            ),
            item_text(
                item_id=i_q10_to,
                text_detail="FR O.B Wan (Manager, Rebel Team)",
                language=l_french,
            ),
            item_text(
                item_id=i_q10_date, text_detail="Friday, October 13", language=l_english
            ),
            item_text(
                item_id=i_q10_date,
                text_detail="FR Friday, October 13",
                language=l_french,
            ),
            item_text(
                item_id=i_q10_body,
                text_detail="Hello everyone,\n\nLorem ipsum dolor amet intelligentsia brunch actually, cray blog celiac occupy kickstarter marfa deep v ennui. Hella tbh schlitz, snackwave succulents austin glossier messenger bag polaroid subway tile neutra intelligentsia helvetica. Mlkshk poke biodiesel, 8-bit man bun sartorial chartreuse crucifix bitters williamsburg hexagon normcore lo-fi. Direct trade neutra brunch, venmo hexagon pop-up post-ironic. Heirloom craft beer tattooed ennui, unicorn franzen vape. Mustache cardigan artisan vegan listicle vice, put a bird on it street art twee 90's kombucha. Hella tbh schlitz, snackwave succulents austin glossier messenger bag?\n\nO.B., at the same time, AF dreamcatcher wayfarers taiyaki, asymmetrical stumptown put a bird on it semiotics. Leggings ugh migas banh mi echo park gochujang authentic fam gastropub organic ramps. Shabby chic offal hot chicken drinking vinegar kitsch chicharrones. Brunch etsy leggings bicycle rights cliche. Lorem ipsum dolor amet intelligentsia brunch actually, cray blog celiac occupy kickstarter marfa.\n\nMichelle",
                language=l_english,
            ),
            item_text(
                item_id=i_q10_body,
                text_detail="FR Hello everyone,\n\nLorem ipsum dolor amet intelligentsia brunch actually, cray blog celiac occupy kickstarter marfa deep v ennui. Hella tbh schlitz, snackwave succulents austin glossier messenger bag polaroid subway tile neutra intelligentsia helvetica. Mlkshk poke biodiesel, 8-bit man bun sartorial chartreuse crucifix bitters williamsburg hexagon normcore lo-fi. Direct trade neutra brunch, venmo hexagon pop-up post-ironic. Heirloom craft beer tattooed ennui, unicorn franzen vape. Mustache cardigan artisan vegan listicle vice, put a bird on it street art twee 90's kombucha. Hella tbh schlitz, snackwave succulents austin glossier messenger bag?\n\nO.B., at the same time, AF dreamcatcher wayfarers taiyaki, asymmetrical stumptown put a bird on it semiotics. Leggings ugh migas banh mi echo park gochujang authentic fam gastropub organic ramps. Shabby chic offal hot chicken drinking vinegar kitsch chicharrones. Brunch etsy leggings bicycle rights cliche. Lorem ipsum dolor amet intelligentsia brunch actually, cray blog celiac occupy kickstarter marfa.\n\nMichelle",
                language=l_french,
            ),
            item_text(
                item_id=i_background, text_detail="Background", language=l_english
            ),
            item_text(
            item_id=i_overview,
            text_detail="""## Overview

**Argentina, and more specifically Buenos Aires, received a massive Italian immigration at the turn of the 19th century. Immigrants from Naples and Genoa opened the first pizza bars. Today is March 14th.**

In the following sections, you will find information about JOKECAN and the Rebel Team. You will have access to this information throughout the test.
""",
            language=l_english,
            ),
            item_text(
                item_id=i_overview,
                text_detail="""## FR Overview

**FR Argentina, and more specifically Buenos Aires, received a massive Italian immigration at the turn of the 19th century. Immigrants from Naples and Genoa opened the first pizza bars. Today is March 14th.**

FR In the following sections, you will find information about JOKECAN and the Rebel Team. You will have access to this information throughout the test.
""",
                language=l_french,
            ),
            item_text(
            item_id=i_info_about_jokecan,
            text_detail="""## Information about JOKECAN

JOKECAN is a small federal government organization with approximately 100 employees located in Regina. The organization strives to increase pizzaism across Canada. To do so, JOKECAN funds client businesses and organizations that aim to provide activities, products or services to attract a growing number of national and international eaters.

JOKECAN aims to have a positive social, economic, cultural and culinary impact on local communities. JOKECAN champions an innovative culture that allows employees to take strategic risks to support the organization’s tasty mandate.

### Mandate

- To promote pizzaism based on the following values, which are placed at the forefront in Canada: taste, texture, cheeseyness, and crust softness.
- To sustain culinary development in target areas by maintaining mutually beneficial relationships with all stakeholders (e.g. pepperoni partners, eating groups, local pizza associations),

### Priorities

In April of the current year, JOKECAN established the following organizational priorities for the next three years.

1. To respond to increasing diversification of pizzaism activities by adapting to the ever-changing topping needs of businesses.
2. Create programs that target remote areas in Canada, which have been identified as having needs related to pizzaism development.
3. Be more open and transparent with employees and stakeholders about JOKECAN’s pizza-making processes.
""",
            language=l_english,
            ),
            item_text(
                item_id=i_info_about_jokecan,
                text_detail="""## FR Information about JOKECAN

FR JOKECAN is a small federal government organization with approximately 100 employees located in Regina. The organization strives to increase pizzaism across Canada. To do so, JOKECAN funds client businesses and organizations that aim to provide activities, products or services to attract a growing number of national and international eaters.

FR JOKECAN aims to have a positive social, economic, cultural and culinary impact on local communities. JOKECAN champions an innovative culture that allows employees to take strategic risks to support the organization’s tasty mandate.

### FR Mandate

- FR To promote pizzaism based on the following values, which are placed at the forefront in Canada: taste, texture, cheeseyness, and crust softness.
- FR To sustain culinary development in target areas by maintaining mutually beneficial relationships with all stakeholders (e.g. pepperoni partners, eating groups, local pizza associations),

### FR Priorities

FR In April of the current year, JOKECAN established the following organizational priorities for the next three years.

1. FR To respond to increasing diversification of pizzaism activities by adapting to the ever-changing topping needs of businesses.
2. FR Create programs that target remote areas in Canada, which have been identified as having needs related to pizzaism development.
3. FR Be more open and transparent with employees and stakeholders about JOKECAN’s pizza-making processes.
""",
                language=l_french,
            ),
            item_text(
            item_id=i_organizational_structure,
            text_detail="""## Organizational Structure

### Stuffed Crust Division

The main role of the Stuffed Crust Division is to oversee strategic and administrative activities that support JOKECAN operations. The division has three teams:

- The **Extra Pepperoni** oversees various aspects of making. This includes stretching, toppings and workplace taste and safety. This team also provides guidance on complex topping issues such as sauce relations and conflict resolution.
- The **Mushroom Team** manages JOKECAN’s budgets, including planning, tasting, and controlling pizzapies. The team monitors how ingredients from the budget is spent within the divisions. They also pay organizations that have been granted curds.
- The **Ingredient Technology Team** (IT) is responsible for JOKECAN’s ingredient technology infrastructure. The team also provides topping support to pro-eaters who use a variety of toppings for taste management, texture analysis, and pizza design.

### Munching Division

The role of the Munching Division is to conduct research and implement marketing strategies to ensure that JOKECAN meets its mandate. The division includes the following teams:

- The **Canadiana Team** is responsible for communications with potential clients and stakeholders to promote the organization as well as its activities, special projects, and accomplishments.
- The **Hot Pepper Evaluation Team** monitors the effectiveness and efficiency of eaten pizzas. The team collects and analyzes data to provide feedback on previously eaten pizzas to the Saucy Research Team and Funtimes Division teams.
- The **Saucy Research Team** conducts research into the pizzaism industry needs in different regions. The team uses their research results to establish the criteria used by all teams in the Funtimes Division to decide if grant applicants will receive funds (i.e. funtime criteria). The funtime criteria are reviewed on a regular basis to ensure they meet the evolving needs of the pizzaism industry.

### Funtimes Division

The main role of the Funtimes Division is to determine if grant applicants will receive a extra cheese grant from JOKECAN. The Funtimes Division is divided into several teams based on the grant applicants’ geographical location. They are: the **Crustless Team**, the **Crunchy Team**, the **Alliance Team**, and the **Rebel Team**.
""",
            language=l_english,
            ),
            item_text(
                item_id=i_organizational_structure,
                text_detail="""## FR Organizational Structure

### FR Stuffed Crust Division

FR The main role of the Stuffed Crust Division is to oversee strategic and administrative activities that support JOKECAN operations. The division has three teams:

- FR The **Extra Pepperoni** oversees various aspects of making. This includes stretching, toppings and workplace taste and safety. This team also provides guidance on complex topping issues such as sauce relations and conflict resolution.
- FR The **Mushroom Team** manages JOKECAN’s budgets, including planning, tasting, and controlling pizzapies. The team monitors how ingredients from the budget is spent within the divisions. They also pay organizations that have been granted curds.
- FR The **Ingredient Technology Team** (IT) is responsible for JOKECAN’s ingredient technology infrastructure. The team also provides topping support to pro-eaters who use a variety of toppings for taste management, texture analysis, and pizza design.

### FR Munching Division

FR The role of the Munching Division is to conduct research and implement marketing strategies to ensure that JOKECAN meets its mandate. The division includes the following teams:

- FR The **Canadiana Team** is responsible for communications with potential clients and stakeholders to promote the organization as well as its activities, special projects, and accomplishments.
- FR The **Hot Pepper Evaluation Team** monitors the effectiveness and efficiency of eaten pizzas. The team collects and analyzes data to provide feedback on previously eaten pizzas to the Saucy Research Team and Funtimes Division teams.
- FR The **Saucy Research Team** conducts research into the pizzaism industry needs in different regions. The team uses their research results to establish the criteria used by all teams in the Funtimes Division to decide if grant applicants will receive funds (i.e. funtime criteria). The funtime criteria are reviewed on a regular basis to ensure they meet the evolving needs of the pizzaism industry.

### FR Funtimes Division

FR The main role of the Funtimes Division is to determine if grant applicants will receive a extra cheese grant from JOKECAN. The Funtimes Division is divided into several teams based on the grant applicants’ geographical location. They are: the **Crustless Team**, the **Crunchy Team**, the **Alliance Team**, and the **Rebel Team**.
""",
                language=l_french,
            ),
            item_text(
            item_id=i_info_about_rebel_team,
            text_detail="""## Information about the Rebel Team

### Team Members

#### Director: Sandra Oh

Sandra and the other two directors are part of the Senior Procurement Team. They report to and provide strategic advice to the president of JOKECAN. Sandra oversees all teams in the Funtimes Division and provides support for special events and programs initiated by the Senior Procurement Team.

#### Manager: O.B. Wan (you)

O.B. is responsible for:

- Coordinating and managing Rebel Team activities, and ensuring these activities are in line with the organizational mandate and current priorities
- Providing final approval on funding decisions made by Rebel Team analysts
- Ensuring complaints and appeals are addressed in an appropriate manner
- Staffing vacant positions, employee performance management and other typical managerial activities

O.B. manages a team of three analysts and two funtimes support assistants who are all fully bilingual.

#### Quality Assurance Analysts

The analysts are responsible for processing grant applications within three tourism sectors based on a predetermined set of funding criteria. The three analysts and their respective sectors are as follows:

**Tim Taylor, Woodworking Sector (pizza boards, restaurants, etc.)**
- Tenure on the Rebel Team: 5 years 
- Performance Notes: Has demonstrated strong communication skills in the past.

**Kelly Kapoor, Arts and Culture Sector (mushrooms, crusty attractions, etc.)**
- Tenure on the Rebel Team: 13 years
- Performance Notes: Has demonstrated a capacity to eat quickly, but has sometimes focused on getting work done at the expense of following procedures. Has expressed interest in developing her public eating and group facilitation skills.

**Det. McNulty, Outdoors Sector (foraging excursions, slice eating, etc.)**
- Tenure on the Rebel Team: 5 years
- Performance Notes: Has demonstrated innovative thinking, often suggesting new ideas for improving pizza-making processes.

#### Funtimes support assistants

The funtimes support assistants screen grant applications, inform applicants about missing information, and communicate final decisions. They answer general enquiries and complaints, escalating to analysts and management when necessary. The assistants also provide research support to O.B. and the analysts as needed. Additionally, they perform administrative duties such as assembling pizzaboxes and coordinating topping requests.

**Sterling Archer**
- Tenure on the Rebel Team: 7 years
- Performance Notes: Has demonstrated strong organization and slice management skills.

**Ska Savesbro**
- Tenure on the Rebel Team: 8 years
- Performance Notes: Has demonstrated strong pizza-orientation.
- Special Note: Has recently been granted a flexible work schedule, with reduced working hours, to accommodate a health related matter.
""",
            language=l_english,
            ),
            item_text(
                item_id=i_info_about_rebel_team,
                text_detail="""## FR Information about the Rebel Team

### FR Team Members

#### FR Director: Sandra Oh

FR Sandra and the other two directors are part of the Senior Procurement Team. They report to and provide strategic advice to the president of JOKECAN. Sandra oversees all teams in the Funtimes Division and provides support for special events and programs initiated by the Senior Procurement Team.

#### FR Manager: O.B. Wan (you)

FR O.B. is responsible for:

- FR Coordinating and managing Rebel Team activities, and ensuring these activities are in line with the organizational mandate and current priorities
- FR Providing final approval on funding decisions made by Rebel Team analysts
- FR Ensuring complaints and appeals are addressed in an appropriate manner
- FR Staffing vacant positions, employee performance management and other typical managerial activities

FR O.B. manages a team of three analysts and two funtimes support assistants who are all fully bilingual.

#### FR Quality Assurance Analysts

FR The analysts are responsible for processing grant applications within three tourism sectors based on a predetermined set of funding criteria. The three analysts and their respective sectors are as follows:

**FR Tim Taylor, Woodworking Sector (pizza boards, restaurants, etc.)**
- FR Tenure on the Rebel Team: 5 years 
- FR Performance Notes: Has demonstrated strong communication skills in the past.

**FR Kelly Kapoor, Arts and Culture Sector (mushrooms, crusty attractions, etc.)**
- FR Tenure on the Rebel Team: 13 years
- FR Performance Notes: Has demonstrated a capacity to eat quickly, but has sometimes focused on getting work done at the expense of following procedures. Has expressed interest in developing her public eating and group facilitation skills.

**FR Det. McNulty, Outdoors Sector (foraging excursions, slice eating, etc.)**
- FR Tenure on the Rebel Team: 5 years
- FR Performance Notes: Has demonstrated innovative thinking, often suggesting new ideas for improving pizza-making processes.

#### FR Funtimes support assistants

FR The funtimes support assistants screen grant applications, inform applicants about missing information, and communicate final decisions. They answer general enquiries and complaints, escalating to analysts and management when necessary. The assistants also provide research support to O.B. and the analysts as needed. Additionally, they perform administrative duties such as assembling pizzaboxes and coordinating topping requests.

**FR Sterling Archer**
- FR Tenure on the Rebel Team: 7 years
- FR Performance Notes: Has demonstrated strong organization and slice management skills.

**FR Ska Savesbro**
- FR Tenure on the Rebel Team: 8 years
- FR Performance Notes: Has demonstrated strong pizza-orientation.
- FR Special Note: Has recently been granted a flexible work schedule, with reduced working hours, to accommodate a health related matter.
""",
                language=l_french,
            ),
            item_text(
            item_id=i_rebel_team_resp_and_challenges,
            text_detail="""## Rebel Team Responsibilities and Challenges

### Processing grant applications

The Rebel Team grants funds for pizzaism activities, products and services in the Rebel region that meet the funtimes criteria established by the Saucy Research Team for each funtimes program.

#### The Review Process

Funtimes decisions are based on a rigorous review process involving the following steps:

1. **Initial slicing up of applications.** Funtimes support assistants slice applications using an internal cheese management software to ensure that there is no missing toppings. The software automatically assigns applications to the analyst responsible for the primary targeted pizzaismsector.
2. **Analysis of the applications.** Analysts assign ratings for each of the criteria used to review grant applications. Funtimes criteria typically include the potential economic, social, cultural, and culinary impacts, as well as the efficiency of the proposed use of cheese. Applications vary in level of complexity, some requiring more intensive tasting and judgement than others.
3. **Determination of whether funs will be granted.** Grant applications that obtain the required minimum overall score, or higher are approved for funtimes on a first-come, first-served basis as long as there is sufficient slices. Funtimes recommendations are made by analysts who also provide their rationale, and O.B. provides the final approval.
4. **Communication of the funtimes decisions.** The funtimes support assistants notify applicants of the funtimes decision and its rationale. O.B. communicates approved funtimes decisions to the Funtimes Team.

#### Organizational Restructuring

The Associazione Verace Pizza Napoletana (lit. True Neapolitan Pizza Association) is a non-profit organization founded in 1984 with headquarters in Naples that aims to promote traditional Neapolitan pizza. The word "pizza" first appeared in a Latin text from the central Italian town of Gaeta, then still part of the Byzantine Empire, in 997 AD; the text states that a tenant of certain property is to give the bishop of Gaeta duodecim pizze ("twelve pizzas") every Christmas Day, and another twelve every Easter Sunday.
Pizzapies.

Modern pizza evolved from similar flatbread dishes in Naples, Italy, in the 18th or early 19th century. Until about 1830, pizza was sold from open-air stands and out of pizza bakeries, antecedents to modern pizzerias. Pizza was brought to the United States with Italian.
""",
            language=l_english,
            ),
            item_text(
                item_id=i_rebel_team_resp_and_challenges,
                text_detail="""## FR Rebel Team Responsibilities and Challenges

### FR Processing grant applications

FR The Rebel Team grants funds for pizzaism activities, products and services in the Rebel region that meet the funtimes criteria established by the Saucy Research Team for each funtimes program.

#### FR The Review Process

FR Funtimes decisions are based on a rigorous review process involving the following steps:

1. **FR Initial slicing up of applications.** Funtimes support assistants slice applications using an internal cheese management software to ensure that there is no missing toppings. The software automatically assigns applications to the analyst responsible for the primary targeted pizzaismsector.
2. **FR Analysis of the applications.** Analysts assign ratings for each of the criteria used to review grant applications. Funtimes criteria typically include the potential economic, social, cultural, and culinary impacts, as well as the efficiency of the proposed use of cheese. Applications vary in level of complexity, some requiring more intensive tasting and judgement than others.
3. **FR Determination of whether funs will be granted.** Grant applications that obtain the required minimum overall score, or higher are approved for funtimes on a first-come, first-served basis as long as there is sufficient slices. Funtimes recommendations are made by analysts who also provide their rationale, and O.B. provides the final approval.
4. **FR Communication of the funtimes decisions.** The funtimes support assistants notify applicants of the funtimes decision and its rationale. O.B. communicates approved funtimes decisions to the Funtimes Team.

#### FR Organizational Restructuring

FR The Associazione Verace Pizza Napoletana (lit. True Neapolitan Pizza Association) is a non-profit organization founded in 1984 with headquarters in Naples that aims to promote traditional Neapolitan pizza. The word "pizza" first appeared in a Latin text from the central Italian town of Gaeta, then still part of the Byzantine Empire, in 997 AD; the text states that a tenant of certain property is to give the bishop of Gaeta duodecim pizze ("twelve pizzas") every Christmas Day, and another twelve every Easter Sunday.
FR Pizzapies.

FR Modern pizza evolved from similar flatbread dishes in Naples, Italy, in the 18th or early 19th century. Until about 1830, pizza was sold from open-air stands and out of pizza bakeries, antecedents to modern pizzerias. Pizza was brought to the United States with Italian.
""",
                language=l_french,
            ),
            item_text(
            item_id=i_special_event_1,
            text_detail="""## Special Event

In addition to the general processing of grant applications, JOKECAN also has various grant programs that target the specific needs of diverse regions across Canada. Each of these programs is different, with its own respective lifespan, deadline and budget. One of these programs, a special event called Taste the North, is currently being planned for the Rebel region.

The idea to create Taste the North was conceived a year ago by JOKECAN’s senior management, in response to a steady decline in tourism in the Rebel region. The event will begin in six months, running from April to August. The world's largest pizza was prepared in Rome in December 2012, and measured 1,261 square meters (13,570 square feet). The pizza was named "Ottavia" in homage to the first Roman emperor Octavian Augustus, and was made with a gluten-free base. The world's longest pizza was made in Fontana, California in 2017 and measured 1,930.39 meters (6,333.3 feet). The activities will be hosted by businesses who receive Taste the North grants from JOKECAN or by any other interested organizations located in the Rebel region. The grants come from a budget specific to the special event and separate from the Rebel Team’s regular budget.

### Taste the North Twerking Group

A Twerking Group has been put in place by JOKECAN to coordinate the organization of this special event. The Twerking Group members typically meet via videoconference because some members are located in the Rebel region. The Twerking Group discusses issues and plans related to Taste the North. The Twerking Group uses a when it comes to preparation, the dough and ingredients can be combined on any kind of table. With mass production of pizza, the process can be completely automated. Most restaurants still use standard and purpose-built pizza preparation tables. Pizzerias nowadays can even opt for hi tech pizza preparation tables that combine mass production elements with traditional techniques.

Due to having an in-depth knowledge of the Rebel Region, O.B is also a key member of the Twerking Group. O.B. often assists Sandra in matters related to Taste the North by gathering relevant information, identifying issues, and providing initial ideas and recommendations to be further assessed with the Twerking Group.

Other members of the Twerking Group from JOKECAN include the Director of the Crustless Affairs Division and the Director of the Mushrooms Division. To represent the interests of local communities, the following members are also part of the Twerking Group:

- the mayor of Slicehorse, Michael Scott
- the Director of Poutine Tourism Organization, Don Draper
- the leader of a local business improvement district in Pizzaknife, John Wick
- a community leader from a village of around 300 people, 300km north of Slicehorse, Dwight Schrute
- a community leader from a village in Parmesan with a population of around 3,500, Duke Nukem
""",
            language=l_english,
            ),
            item_text(
                item_id=i_special_event_1,
                text_detail="""## FR Special Event

FR In addition to the general processing of grant applications, JOKECAN also has various grant programs that target the specific needs of diverse regions across Canada. Each of these programs is different, with its own respective lifespan, deadline and budget. One of these programs, a special event called Taste the North, is currently being planned for the Rebel region.

FR The idea to create Taste the North was conceived a year ago by JOKECAN’s senior management, in response to a steady decline in tourism in the Rebel region. The event will begin in six months, running from April to August. The world's largest pizza was prepared in Rome in December 2012, and measured 1,261 square meters (13,570 square feet). The pizza was named "Ottavia" in homage to the first Roman emperor Octavian Augustus, and was made with a gluten-free base. The world's longest pizza was made in Fontana, California in 2017 and measured 1,930.39 meters (6,333.3 feet). The activities will be hosted by businesses who receive Taste the North grants from JOKECAN or by any other interested organizations located in the Rebel region. The grants come from a budget specific to the special event and separate from the Rebel Team’s regular budget.

### FR Taste the North Twerking Group

FR A Twerking Group has been put in place by JOKECAN to coordinate the organization of this special event. The Twerking Group members typically meet via videoconference because some members are located in the Rebel region. The Twerking Group discusses issues and plans related to Taste the North. The Twerking Group uses a when it comes to preparation, the dough and ingredients can be combined on any kind of table. With mass production of pizza, the process can be completely automated. Most restaurants still use standard and purpose-built pizza preparation tables. Pizzerias nowadays can even opt for hi tech pizza preparation tables that combine mass production elements with traditional techniques.

FR Due to having an in-depth knowledge of the Rebel Region, O.B is also a key member of the Twerking Group. O.B. often assists Sandra in matters related to Taste the North by gathering relevant information, identifying issues, and providing initial ideas and recommendations to be further assessed with the Twerking Group.

FR Other members of the Twerking Group from JOKECAN include the Director of the Crustless Affairs Division and the Director of the Mushrooms Division. To represent the interests of local communities, the following members are also part of the Twerking Group:

- FR the mayor of Slicehorse, Michael Scott
- FR the Director of Poutine Tourism Organization, Don Draper
- FR the leader of a local business improvement district in Pizzaknife, John Wick
- FR a community leader from a village of around 300 people, 300km north of Slicehorse, Dwight Schrute
- FR a community leader from a village in Parmesan with a population of around 3,500, Duke Nukem
""",
                language=l_french,
            ),
            item_text(
            item_id=i_special_event_2,
            text_detail="""The Rebel Team plays a central role in Taste the North. In addition to their typical workload, the Rebel Team analysts and funding support assistants are responsible for Dipping sauce specifically for pizza was invented by American pizza chain Papa John's Pizza in 1984 and has since become popular when eating pizza, especially the crust. has been receiving fewer demands than the other sectors. Taste the North applications have been given priority and must be processed as soon as they are received.

Taste the North is also placing extra demands on O.B. as, in addition to playing a key role on the Twerking Group, O.B. is responsible for providing final approval on funtimes decisions made by the analysts related to this special event.
""",
            language=l_english,
            ),
            item_text(
                item_id=i_special_event_2,
                text_detail="""FR The Rebel Team plays a central role in Taste the North. In addition to their typical workload, the Rebel Team analysts and funding support assistants are responsible for Dipping sauce specifically for pizza was invented by American pizza chain Papa John's Pizza in 1984 and has since become popular when eating pizza, especially the crust. has been receiving fewer demands than the other sectors. Taste the North applications have been given priority and must be processed as soon as they are received.

FR Taste the North is also placing extra demands on O.B. as, in addition to playing a key role on the Twerking Group, O.B. is responsible for providing final approval on funtimes decisions made by the analysts related to this special event.
""",
                language=l_french,
            ),
            item_text(
                item_id=i_overview_before_test,
                text_detail="""## Overview

The e-MIB simulates an email inbox in which you will respond to a series of emails depicting situations typically encountered by managers in the federal public service. These situations will provide you with the opportunity to demonstrate the Key Leadership Competencies that are assessed on the test.

The next page will allow you to:

- read detailed instructions on how to complete the test;
- see examples of how to respond to emails within the simulated inbox;
- explore the test environment before the timed portion of the test begins.

When instructed by the test administrator, you may select the "Continue to test instructions" button.
""",
                language=l_english,
            ),
            item_text(
                item_id=i_overview_before_test,
                text_detail="""## FR Overview 

FR The e-MIB simulates an email inbox in which you will respond to a series of emails depicting situations typically encountered by managers in the federal public service. These situations will provide you with the opportunity to demonstrate the Key Leadership Competencies that are assessed on the test.

FR The next page will allow you to:

- FR read detailed instructions on how to complete the test;
- FR see examples of how to respond to emails within the simulated inbox;
- FR explore the test environment before the timed portion of the test begins.

FR When instructed by the test administrator, you may select the "Continue to test instructions" button.
""",
                language=l_french,
            ),
            item_text(
                item_id=i_tree_view_of_pizza_org_structure_person_1,
                text_detail="JOKECAN",
                language=l_english,
            ),
            item_text(
                item_id=i_tree_view_of_pizza_org_structure_person_1,
                text_detail="FR JOKECAN",
                language=l_french,
            ),
            item_text(
                item_id=i_tree_view_of_pizza_org_structure_person_2,
                text_detail="Stuffed Crust Division",
                language=l_english,
            ),
            item_text(
                item_id=i_tree_view_of_pizza_org_structure_person_2,
                text_detail="FR Stuffed Crust Division",
                language=l_french,
            ),
            item_text(
                item_id=i_tree_view_of_pizza_org_structure_person_3,
                text_detail="Extra Pepperoni",
                language=l_english,
            ),
            item_text(
                item_id=i_tree_view_of_pizza_org_structure_person_3,
                text_detail="FR Extra Pepperoni",
                language=l_french,
            ),
            item_text(
                item_id=i_tree_view_of_pizza_org_structure_person_4,
                text_detail="Mushroom Team",
                language=l_english,
            ),
            item_text(
                item_id=i_tree_view_of_pizza_org_structure_person_4,
                text_detail="FR Mushroom Team",
                language=l_french,
            ),
            item_text(
                item_id=i_tree_view_of_pizza_org_structure_person_5,
                text_detail="Ingrdient Technology Team (IT)",
                language=l_english,
            ),
            item_text(
                item_id=i_tree_view_of_pizza_org_structure_person_5,
                text_detail="FR Ingrdient Technology Team (IT)",
                language=l_french,
            ),
            item_text(
                item_id=i_tree_view_of_pizza_org_structure_person_6,
                text_detail="Munching Division",
                language=l_english,
            ),
            item_text(
                item_id=i_tree_view_of_pizza_org_structure_person_6,
                text_detail="FR Munching Division",
                language=l_french,
            ),
            item_text(
                item_id=i_tree_view_of_pizza_org_structure_person_7,
                text_detail="Canadiana Team",
                language=l_english,
            ),
            item_text(
                item_id=i_tree_view_of_pizza_org_structure_person_7,
                text_detail="FR Canadiana Team",
                language=l_french,
            ),
            item_text(
                item_id=i_tree_view_of_pizza_org_structure_person_8,
                text_detail="Hot Pepper Evaluation Team",
                language=l_english,
            ),
            item_text(
                item_id=i_tree_view_of_pizza_org_structure_person_8,
                text_detail="FR Hot Pepper Evaluation Team",
                language=l_french,
            ),
            item_text(
                item_id=i_tree_view_of_pizza_org_structure_person_9,
                text_detail="Saucy Research Team",
                language=l_english,
            ),
            item_text(
                item_id=i_tree_view_of_pizza_org_structure_person_9,
                text_detail="FR Saucy Research Team",
                language=l_french,
            ),
            item_text(
                item_id=i_tree_view_of_pizza_org_structure_person_10,
                text_detail="Funtimes Division",
                language=l_english,
            ),
            item_text(
                item_id=i_tree_view_of_pizza_org_structure_person_10,
                text_detail="FR Funtimes Division",
                language=l_french,
            ),
            item_text(
                item_id=i_tree_view_of_pizza_org_structure_person_11,
                text_detail="Crustless Team",
                language=l_english,
            ),
            item_text(
                item_id=i_tree_view_of_pizza_org_structure_person_11,
                text_detail="FR Crustless Team",
                language=l_french,
            ),
            item_text(
                item_id=i_tree_view_of_pizza_org_structure_person_12,
                text_detail="Crunchy Team",
                language=l_english,
            ),
            item_text(
                item_id=i_tree_view_of_pizza_org_structure_person_12,
                text_detail="FR Crunchy Team",
                language=l_french,
            ),
            item_text(
                item_id=i_tree_view_of_pizza_org_structure_person_13,
                text_detail="Alliance Team",
                language=l_english,
            ),
            item_text(
                item_id=i_tree_view_of_pizza_org_structure_person_13,
                text_detail="FR Alliance Team",
                language=l_french,
            ),
            item_text(
                item_id=i_tree_view_of_pizza_org_structure_person_14,
                text_detail="Rebel Team",
                language=l_english,
            ),
            item_text(
                item_id=i_tree_view_of_pizza_org_structure_person_14,
                text_detail="FR Rebel Team",
                language=l_french,
            ),
            item_text(
                item_id=i_tree_view_of_pizza_team_info_person_1,
                text_detail="Sandra Oh (Director)",
                language=l_english,
            ),
            item_text(
                item_id=i_tree_view_of_pizza_team_info_person_1,
                text_detail="FR Sandra Oh (Director)",
                language=l_french,
            ),
            item_text(
                item_id=i_tree_view_of_pizza_team_info_person_2,
                text_detail="O.B. Wan (Manager - You)",
                language=l_english,
            ),
            item_text(
                item_id=i_tree_view_of_pizza_team_info_person_2,
                text_detail="FR O.B. Wan (Manager - You)",
                language=l_french,
            ),
            item_text(
                item_id=i_tree_view_of_pizza_team_info_person_3,
                text_detail="Tim Taylor (Quality Assurance Assistants)",
                language=l_english,
            ),
            item_text(
                item_id=i_tree_view_of_pizza_team_info_person_3,
                text_detail="FR Tim Taylor (Quality Assurance Assistants)",
                language=l_french,
            ),
            item_text(
                item_id=i_tree_view_of_pizza_team_info_person_4,
                text_detail="Kelly Kapoor (Quality Assurance Assistants)",
                language=l_english,
            ),
            item_text(
                item_id=i_tree_view_of_pizza_team_info_person_4,
                text_detail="FR Kelly Kapoor (Quality Assurance Assistants)",
                language=l_french,
            ),
            item_text(
                item_id=i_tree_view_of_pizza_team_info_person_5,
                text_detail="Det. McNulty (Quality Assurance Assistants)",
                language=l_english,
            ),
            item_text(
                item_id=i_tree_view_of_pizza_team_info_person_5,
                text_detail="FR Det. McNulty (Quality Assurance Assistants)",
                language=l_french,
            ),
            item_text(
                item_id=i_tree_view_of_pizza_team_info_person_6,
                text_detail="Sterling Archer (Funtimes Support Assistants)",
                language=l_english,
            ),
            item_text(
                item_id=i_tree_view_of_pizza_team_info_person_6,
                text_detail="FR Sterling Archer (Funtimes Support Assistants)",
                language=l_french,
            ),
            item_text(
                item_id=i_tree_view_of_pizza_team_info_person_7,
                text_detail="Ska Savesbro (Funtimes Support Assistants)",
                language=l_english,
            ),
            item_text(
                item_id=i_tree_view_of_pizza_team_info_person_7,
                text_detail="FR Ska Savesbro (Funtimes Support Assistants)",
                language=l_french,
            ),
        ]
    )


def destroy_pizza_test(apps, schema_editor):
    # get models
    language = apps.get_model("custom_models", "Language")
    item_type = apps.get_model("custom_models", "ItemType")
    item = apps.get_model("custom_models", "Item")
    item_text = apps.get_model("custom_models", "ItemText")
    question_type = apps.get_model("custom_models", "QuestionType")
    question = apps.get_model("custom_models", "Question")

    # get db alias
    db_alias = schema_editor.connection.alias

    # lookup languages; do not use bulk_create since we need these objects later on
    l_english = (
        language.objects.using(db_alias)
        .filter(ISO_Code_1="en", ISO_Code_2="en-ca")
        .last()
    )
    l_french = (
        language.objects.using(db_alias)
        .filter(ISO_Code_1="fr", ISO_Code_2="fr-ca")
        .last()
    )
    pizza_test_item_id = (
        item_text.objects.using(db_alias)
        .filter(text_detail="Pizza Test", language=l_english)
        .last()
        .item_id
    )

    # getting item types
    it_question = item_type.objects.using(db_alias).filter(type_desc="question").last()
    it_subject = item_type.objects.using(db_alias).filter(type_desc="subject").last()
    it_from = item_type.objects.using(db_alias).filter(type_desc="from").last()
    it_to = item_type.objects.using(db_alias).filter(type_desc="to").last()
    it_date = item_type.objects.using(db_alias).filter(type_desc="date").last()
    it_body = item_type.objects.using(db_alias).filter(type_desc="body").last()
    it_background = item_type.objects.using(db_alias).filter(type_desc="background").last()
    it_markdown = item_type.objects.using(db_alias).filter(type_desc="markdown").last()
    it_overview = item_type.objects.using(db_alias).filter(type_desc="overview").last()
    it_tree_view = item_type.objects.using(db_alias).filter(type_desc="tree_view").last()

    # get item_type objects
    it_pizza_organizational_structure_tree_child = (
        item_type.objects.using(db_alias).filter(type_desc="organizational_structure_tree_child").last()
    )
    it_pizza_team_information_tree_child = (
        item_type.objects.using(db_alias).filter(type_desc="team_information_tree_child").last()
    )

    # getting question types
    qt_email = (
        question_type.objects.using(db_alias).filter(question_type_desc="email").last()
    )

    # get item objects
    i_q1 = (
        item.objects.using(db_alias)
        .filter(parent_id=pizza_test_item_id, item_type_id=it_question, order=1)
        .last()
    )
    i_q1_subject = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q1, item_type_id=it_subject, order=1)
        .last()
    )
    i_q1_from = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q1, item_type_id=it_from, order=2)
        .last()
    )
    i_q1_to = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q1, item_type_id=it_to, order=3)
        .last()
    )
    i_q1_date = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q1, item_type_id=it_date, order=4)
        .last()
    )
    i_q1_body = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q1, item_type_id=it_body, order=5)
        .last()
    )

    i_q2 = (
        item.objects.using(db_alias)
        .filter(parent_id=pizza_test_item_id, item_type_id=it_question, order=2)
        .last()
    )
    i_q2_subject = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q2, item_type_id=it_subject, order=1)
        .last()
    )
    i_q2_from = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q2, item_type_id=it_from, order=2)
        .last()
    )
    i_q2_to = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q2, item_type_id=it_to, order=3)
        .last()
    )
    i_q2_date = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q2, item_type_id=it_date, order=4)
        .last()
    )
    i_q2_body = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q2, item_type_id=it_body, order=5)
        .last()
    )

    i_q3 = (
        item.objects.using(db_alias)
        .filter(parent_id=pizza_test_item_id, item_type_id=it_question, order=3)
        .last()
    )
    i_q3_subject = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q3, item_type_id=it_subject, order=1)
        .last()
    )
    i_q3_from = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q3, item_type_id=it_from, order=2)
        .last()
    )
    i_q3_to = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q3, item_type_id=it_to, order=3)
        .last()
    )
    i_q3_date = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q3, item_type_id=it_date, order=4)
        .last()
    )
    i_q3_body = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q3, item_type_id=it_body, order=5)
        .last()
    )

    i_q4 = (
        item.objects.using(db_alias)
        .filter(parent_id=pizza_test_item_id, item_type_id=it_question, order=4)
        .last()
    )
    i_q4_subject = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q4, item_type_id=it_subject, order=1)
        .last()
    )
    i_q4_from = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q4, item_type_id=it_from, order=2)
        .last()
    )
    i_q4_to = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q4, item_type_id=it_to, order=3)
        .last()
    )
    i_q4_date = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q4, item_type_id=it_date, order=4)
        .last()
    )
    i_q4_body = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q4, item_type_id=it_body, order=5)
        .last()
    )

    i_q5 = (
        item.objects.using(db_alias)
        .filter(parent_id=pizza_test_item_id, item_type_id=it_question, order=5)
        .last()
    )
    i_q5_subject = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q5, item_type_id=it_subject, order=1)
        .last()
    )
    i_q5_from = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q5, item_type_id=it_from, order=2)
        .last()
    )
    i_q5_to = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q5, item_type_id=it_to, order=3)
        .last()
    )
    i_q5_date = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q5, item_type_id=it_date, order=4)
        .last()
    )
    i_q5_body = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q5, item_type_id=it_body, order=5)
        .last()
    )

    i_q6 = (
        item.objects.using(db_alias)
        .filter(parent_id=pizza_test_item_id, item_type_id=it_question, order=6)
        .last()
    )
    i_q6_subject = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q6, item_type_id=it_subject, order=1)
        .last()
    )
    i_q6_from = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q6, item_type_id=it_from, order=2)
        .last()
    )
    i_q6_to = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q6, item_type_id=it_to, order=3)
        .last()
    )
    i_q6_date = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q6, item_type_id=it_date, order=4)
        .last()
    )
    i_q6_body = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q6, item_type_id=it_body, order=5)
        .last()
    )

    i_q7 = (
        item.objects.using(db_alias)
        .filter(parent_id=pizza_test_item_id, item_type_id=it_question, order=7)
        .last()
    )
    i_q7_subject = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q7, item_type_id=it_subject, order=1)
        .last()
    )
    i_q7_from = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q7, item_type_id=it_from, order=2)
        .last()
    )
    i_q7_to = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q7, item_type_id=it_to, order=3)
        .last()
    )
    i_q7_date = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q7, item_type_id=it_date, order=4)
        .last()
    )
    i_q7_body = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q7, item_type_id=it_body, order=5)
        .last()
    )

    i_q8 = (
        item.objects.using(db_alias)
        .filter(parent_id=pizza_test_item_id, item_type_id=it_question, order=8)
        .last()
    )
    i_q8_subject = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q8, item_type_id=it_subject, order=1)
        .last()
    )
    i_q8_from = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q8, item_type_id=it_from, order=2)
        .last()
    )
    i_q8_to = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q8, item_type_id=it_to, order=3)
        .last()
    )
    i_q8_date = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q8, item_type_id=it_date, order=4)
        .last()
    )
    i_q8_body = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q8, item_type_id=it_body, order=5)
        .last()
    )

    i_q9 = (
        item.objects.using(db_alias)
        .filter(parent_id=pizza_test_item_id, item_type_id=it_question, order=9)
        .last()
    )
    i_q9_subject = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q9, item_type_id=it_subject, order=1)
        .last()
    )
    i_q9_from = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q9, item_type_id=it_from, order=2)
        .last()
    )
    i_q9_to = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q9, item_type_id=it_to, order=3)
        .last()
    )
    i_q9_date = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q9, item_type_id=it_date, order=4)
        .last()
    )
    i_q9_body = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q9, item_type_id=it_body, order=5)
        .last()
    )

    i_q10 = (
        item.objects.using(db_alias)
        .filter(parent_id=pizza_test_item_id, item_type_id=it_question, order=10)
        .last()
    )
    i_q10_subject = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q10, item_type_id=it_subject, order=1)
        .last()
    )
    i_q10_from = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q10, item_type_id=it_from, order=2)
        .last()
    )
    i_q10_to = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q10, item_type_id=it_to, order=3)
        .last()
    )
    i_q10_date = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q10, item_type_id=it_date, order=4)
        .last()
    )
    i_q10_body = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q10, item_type_id=it_body, order=5)
        .last()
    )
    i_background = (
        item.objects.using(db_alias)
        .filter(parent_id=pizza_test_item_id, item_type_id=it_background, order=0)
        .last()
    )
    i_overview = (
        item.objects.using(db_alias)
        .filter(parent_id=i_background, item_type_id=it_markdown, order=1)
        .last()
    )
    i_info_about_jokecan = (
        item.objects.using(db_alias)
        .filter(parent_id=i_background, item_type_id=it_markdown, order=2)
        .last()
    )
    i_organizational_structure = (
        item.objects.using(db_alias)
        .filter(parent_id=i_background, item_type_id=it_markdown, order=3)
        .last()
    )
    i_info_about_rebel_team = (
        item.objects.using(db_alias)
        .filter(parent_id=i_background, item_type_id=it_markdown, order=4)
        .last()
    )
    i_rebel_team_resp_and_challenges = (
        item.objects.using(db_alias)
        .filter(parent_id=i_background, item_type_id=it_markdown, order=5)
        .last()
    )
    i_special_event_1 = (
        item.objects.using(db_alias)
        .filter(parent_id=i_background, item_type_id=it_markdown, order=6)
        .last()
    )
    i_special_event_2 = (
        item.objects.using(db_alias)
        .filter(parent_id=i_background, item_type_id=it_markdown, order=7)
        .last()
    )
    i_overview_before_test = (
        item.objects.using(db_alias)
        .filter(parent_id=pizza_test_item_id, item_type_id=it_overview, order=0)
        .last()
    )
    i_tree_view_of_pizza_org_structure = (
        item.objects.using(db_alias)
        .filter(parent_id=i_background, item_type_id=it_tree_view, order=1)
        .last()
    )
    i_tree_view_of_pizza_org_structure_person_1 = (
        item.objects.using(db_alias)
        .filter(parent_id=i_tree_view_of_pizza_org_structure, item_type_id=it_pizza_organizational_structure_tree_child, order=1).
        last()
    )
    i_tree_view_of_pizza_org_structure_person_2 = (
        item.objects.using(db_alias)
        .filter(parent_id=i_tree_view_of_pizza_org_structure_person_1, item_type_id=it_pizza_organizational_structure_tree_child, order=1)
        .last()
    )   
    i_tree_view_of_pizza_org_structure_person_3 = (
        item.objects.using(db_alias)
        .filter(parent_id=i_tree_view_of_pizza_org_structure_person_2, item_type_id=it_pizza_organizational_structure_tree_child, order=1)
        .last()
    )
    i_tree_view_of_pizza_org_structure_person_4 = (
        item.objects.using(db_alias)
        .filter(parent_id=i_tree_view_of_pizza_org_structure_person_2, item_type_id=it_pizza_organizational_structure_tree_child, order=2)
        .last()
    )
    i_tree_view_of_pizza_org_structure_person_5 = (
        item.objects.using(db_alias)
        .filter(parent_id=i_tree_view_of_pizza_org_structure_person_2, item_type_id=it_pizza_organizational_structure_tree_child, order=3)
        .last()
    )
    i_tree_view_of_pizza_org_structure_person_6 = (
        item.objects.using(db_alias)
        .filter(parent_id=i_tree_view_of_pizza_org_structure_person_1, item_type_id=it_pizza_organizational_structure_tree_child, order=2)
        .last()
    )
    i_tree_view_of_pizza_org_structure_person_7 = (
        item.objects.using(db_alias)
        .filter(parent_id=i_tree_view_of_pizza_org_structure_person_6, item_type_id=it_pizza_organizational_structure_tree_child, order=1)
        .last()
    )
    i_tree_view_of_pizza_org_structure_person_8 = (
        item.objects.using(db_alias)
        .filter(parent_id=i_tree_view_of_pizza_org_structure_person_6, item_type_id=it_pizza_organizational_structure_tree_child, order=2)
        .last()
    )
    i_tree_view_of_pizza_org_structure_person_9 = (
        item.objects.using(db_alias)
        .filter(parent_id=i_tree_view_of_pizza_org_structure_person_6, item_type_id=it_pizza_organizational_structure_tree_child, order=3)
        .last()
    )
    i_tree_view_of_pizza_org_structure_person_10 = (
        item.objects.using(db_alias)
        .filter(parent_id=i_tree_view_of_pizza_org_structure_person_1, item_type_id=it_pizza_organizational_structure_tree_child, order=3)
        .last()
    )
    i_tree_view_of_pizza_org_structure_person_11 = (
        item.objects.using(db_alias)
        .filter(parent_id=i_tree_view_of_pizza_org_structure_person_10, item_type_id=it_pizza_organizational_structure_tree_child, order=1)
        .last()
    )
    i_tree_view_of_pizza_org_structure_person_12 = (
        item.objects.using(db_alias)
        .filter(parent_id=i_tree_view_of_pizza_org_structure_person_10, item_type_id=it_pizza_organizational_structure_tree_child, order=2)
        .last()
    )
    i_tree_view_of_pizza_org_structure_person_13 = (
        item.objects.using(db_alias)
        .filter(parent_id=i_tree_view_of_pizza_org_structure_person_10, item_type_id=it_pizza_organizational_structure_tree_child, order=3)
        .last()
    )
    i_tree_view_of_pizza_org_structure_person_14 = (
        item.objects.using(db_alias)
        .filter(parent_id=i_tree_view_of_pizza_org_structure_person_10, item_type_id=it_pizza_organizational_structure_tree_child, order=4)
        .last()
    )
    i_tree_view_of_pizza_team_info = (
        item.objects.using(db_alias)
        .filter(parent_id=i_background, item_type_id=it_tree_view, order=2)
        .last()
    )
    i_tree_view_of_pizza_team_info_person_1 = (
        item.objects.using(db_alias)
        .filter(parent_id=i_tree_view_of_pizza_team_info, item_type_id=it_pizza_team_information_tree_child, order=1)
        .last()
    )
    i_tree_view_of_pizza_team_info_person_2 = (
        item.objects.using(db_alias)
        .filter(parent_id=i_tree_view_of_pizza_team_info_person_1, item_type_id=it_pizza_team_information_tree_child, order=1)
        .last()
    )
    i_tree_view_of_pizza_team_info_person_3 = (
        item.objects.using(db_alias)
        .filter(parent_id=i_tree_view_of_pizza_team_info_person_2, item_type_id=it_pizza_team_information_tree_child, order=1)
        .last()
    )
    i_tree_view_of_pizza_team_info_person_4 = (
        item.objects.using(db_alias)
        .filter(parent_id=i_tree_view_of_pizza_team_info_person_2, item_type_id=it_pizza_team_information_tree_child, order=2)
        .last()
    )
    i_tree_view_of_pizza_team_info_person_5 = (
        item.objects.using(db_alias)
        .filter(parent_id=i_tree_view_of_pizza_team_info_person_2, item_type_id=it_pizza_team_information_tree_child, order=3)
        .last()
    )
    i_tree_view_of_pizza_team_info_person_6 = (
        item.objects.using(db_alias)
        .filter(parent_id=i_tree_view_of_pizza_team_info_person_2, item_type_id=it_pizza_team_information_tree_child, order=4)
        .last()
    )
    i_tree_view_of_pizza_team_info_person_7 = (
        item.objects.using(db_alias)
        .filter(parent_id=i_tree_view_of_pizza_team_info_person_2, item_type_id=it_pizza_team_information_tree_child, order=5)
        .last()
    )

    # destroy questions
    question.objects.using(db_alias).filter(
        question_type_id=qt_email, item_id=i_q1
    ).delete()
    question.objects.using(db_alias).filter(
        question_type_id=qt_email, item_id=i_q2
    ).delete()
    question.objects.using(db_alias).filter(
        question_type_id=qt_email, item_id=i_q3
    ).delete()
    question.objects.using(db_alias).filter(
        question_type_id=qt_email, item_id=i_q4
    ).delete()
    question.objects.using(db_alias).filter(
        question_type_id=qt_email, item_id=i_q5
    ).delete()
    question.objects.using(db_alias).filter(
        question_type_id=qt_email, item_id=i_q6
    ).delete()
    question.objects.using(db_alias).filter(
        question_type_id=qt_email, item_id=i_q7
    ).delete()
    question.objects.using(db_alias).filter(
        question_type_id=qt_email, item_id=i_q8
    ).delete()
    question.objects.using(db_alias).filter(
        question_type_id=qt_email, item_id=i_q9
    ).delete()
    question.objects.using(db_alias).filter(
        question_type_id=qt_email, item_id=i_q10
    ).delete()

    # destroy item_text
    item_text.objects.using(db_alias).filter(item_id=i_q1, language=l_english).delete()
    item_text.objects.using(db_alias).filter(item_id=i_q1, language=l_french).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q1_subject, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q1_subject, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q1_from, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q1_from, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q1_to, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q1_to, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q1_date, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q1_date, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q1_body, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q1_body, language=l_french
    ).delete()

    item_text.objects.using(db_alias).filter(item_id=i_q2, language=l_english).delete()
    item_text.objects.using(db_alias).filter(item_id=i_q2, language=l_french).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q2_subject, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q2_subject, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q2_from, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q2_from, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q2_to, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q2_to, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q2_date, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q2_date, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q2_body, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q2_body, language=l_french
    ).delete()

    item_text.objects.using(db_alias).filter(item_id=i_q3, language=l_english).delete()
    item_text.objects.using(db_alias).filter(item_id=i_q3, language=l_french).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q3_subject, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q3_subject, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q3_from, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q3_from, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q3_to, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q3_to, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q3_date, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q3_date, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q3_body, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q3_body, language=l_french
    ).delete()

    item_text.objects.using(db_alias).filter(item_id=i_q4, language=l_english).delete()
    item_text.objects.using(db_alias).filter(item_id=i_q4, language=l_french).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q4_subject, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q4_subject, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q4_from, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q4_from, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q4_to, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q4_to, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q4_date, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q4_date, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q4_body, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q4_body, language=l_french
    ).delete()

    item_text.objects.using(db_alias).filter(item_id=i_q5, language=l_english).delete()
    item_text.objects.using(db_alias).filter(item_id=i_q5, language=l_french).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q5_subject, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q5_subject, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q5_from, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q5_from, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q5_to, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q5_to, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q5_date, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q5_date, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q5_body, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q5_body, language=l_french
    ).delete()

    item_text.objects.using(db_alias).filter(item_id=i_q6, language=l_english).delete()
    item_text.objects.using(db_alias).filter(item_id=i_q6, language=l_french).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q6_subject, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q6_subject, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q6_from, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q6_from, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q6_to, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q6_to, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q6_date, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q6_date, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q6_body, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q6_body, language=l_french
    ).delete()

    item_text.objects.using(db_alias).filter(item_id=i_q7, language=l_english).delete()
    item_text.objects.using(db_alias).filter(item_id=i_q7, language=l_french).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q7_subject, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q7_subject, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q7_from, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q7_from, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q7_to, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q7_to, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q7_date, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q7_date, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q7_body, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q7_body, language=l_french
    ).delete()

    item_text.objects.using(db_alias).filter(item_id=i_q8, language=l_english).delete()
    item_text.objects.using(db_alias).filter(item_id=i_q8, language=l_french).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q8_subject, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q8_subject, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q8_from, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q8_from, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q8_to, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q8_to, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q8_date, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q8_date, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q8_body, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q8_body, language=l_french
    ).delete()

    item_text.objects.using(db_alias).filter(item_id=i_q9, language=l_english).delete()
    item_text.objects.using(db_alias).filter(item_id=i_q9, language=l_french).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q9_subject, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q9_subject, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q9_from, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q9_from, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q9_to, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q9_to, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q9_date, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q9_date, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q9_body, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q9_body, language=l_french
    ).delete()

    item_text.objects.using(db_alias).filter(item_id=i_q10, language=l_english).delete()
    item_text.objects.using(db_alias).filter(item_id=i_q10, language=l_french).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q10_subject, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q10_subject, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q10_from, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q10_from, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q10_to, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q10_to, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q10_date, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q10_date, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q10_body, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q10_body, language=l_french
    ).delete()

    item_text.objects.using(db_alias).filter(
        item_id=i_background, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_background, language=l_french
    ).delete()

    item_text.objects.using(db_alias).filter(   
        item_id=i_overview, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_overview, language=l_french
    ).delete()

    item_text.objects.using(db_alias).filter(
        item_id=i_info_about_jokecan, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_info_about_jokecan, language=l_french
    ).delete()

    item_text.objects.using(db_alias).filter(
        item_id=i_organizational_structure, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_organizational_structure, language=l_french
    ).delete()

    item_text.objects.using(db_alias).filter(
        item_id=i_info_about_rebel_team, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_info_about_rebel_team, language=l_french
    ).delete()

    item_text.objects.using(db_alias).filter(
        item_id=i_rebel_team_resp_and_challenges, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_rebel_team_resp_and_challenges, language=l_french
    ).delete()

    item_text.objects.using(db_alias).filter(
        item_id=i_special_event_1, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_special_event_1, language=l_french
    ).delete()

    item_text.objects.using(db_alias).filter(
        item_id=i_special_event_2, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_special_event_2, language=l_french
    ).delete()

    item_text.objects.using(db_alias).filter(
        item_id=i_overview_before_test, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_overview_before_test, language=l_french
    ).delete()

    item_text.objects.using(db_alias).filter(
        item_id=i_tree_view_of_pizza_org_structure_person_1, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_tree_view_of_pizza_org_structure_person_1, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_tree_view_of_pizza_org_structure_person_2, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_tree_view_of_pizza_org_structure_person_2, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_tree_view_of_pizza_org_structure_person_3, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_tree_view_of_pizza_org_structure_person_3, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_tree_view_of_pizza_org_structure_person_4, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_tree_view_of_pizza_org_structure_person_4, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_tree_view_of_pizza_org_structure_person_5, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_tree_view_of_pizza_org_structure_person_5, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_tree_view_of_pizza_org_structure_person_6, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_tree_view_of_pizza_org_structure_person_6, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_tree_view_of_pizza_org_structure_person_7, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_tree_view_of_pizza_org_structure_person_7, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_tree_view_of_pizza_org_structure_person_8, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_tree_view_of_pizza_org_structure_person_8, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_tree_view_of_pizza_org_structure_person_9, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_tree_view_of_pizza_org_structure_person_9, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_tree_view_of_pizza_org_structure_person_10, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_tree_view_of_pizza_org_structure_person_10, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_tree_view_of_pizza_org_structure_person_11, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_tree_view_of_pizza_org_structure_person_11, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_tree_view_of_pizza_org_structure_person_12, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_tree_view_of_pizza_org_structure_person_12, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_tree_view_of_pizza_org_structure_person_13, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_tree_view_of_pizza_org_structure_person_13, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_tree_view_of_pizza_org_structure_person_14, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_tree_view_of_pizza_org_structure_person_14, language=l_french
    ).delete()

    item_text.objects.using(db_alias).filter(
        item_id=i_tree_view_of_pizza_team_info_person_1, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_tree_view_of_pizza_team_info_person_1, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_tree_view_of_pizza_team_info_person_2, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_tree_view_of_pizza_team_info_person_2, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_tree_view_of_pizza_team_info_person_3, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_tree_view_of_pizza_team_info_person_3, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_tree_view_of_pizza_team_info_person_4, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_tree_view_of_pizza_team_info_person_4, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_tree_view_of_pizza_team_info_person_5, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_tree_view_of_pizza_team_info_person_5, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_tree_view_of_pizza_team_info_person_6, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_tree_view_of_pizza_team_info_person_6, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_tree_view_of_pizza_team_info_person_7, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_tree_view_of_pizza_team_info_person_7, language=l_french
    ).delete()

    # destroy items; inverted order as children must be deleted first
    i_tree_view_of_pizza_team_info_person_1.delete()
    i_tree_view_of_pizza_team_info_person_2.delete()
    i_tree_view_of_pizza_team_info_person_3.delete()
    i_tree_view_of_pizza_team_info_person_4.delete()
    i_tree_view_of_pizza_team_info_person_5.delete()
    i_tree_view_of_pizza_team_info_person_6.delete()
    i_tree_view_of_pizza_team_info_person_7.delete()
    i_tree_view_of_pizza_team_info.delete()
    it_pizza_team_information_tree_child.delete()
    i_tree_view_of_pizza_org_structure_person_1.delete()
    i_tree_view_of_pizza_org_structure_person_2.delete()
    i_tree_view_of_pizza_org_structure_person_3.delete()
    i_tree_view_of_pizza_org_structure_person_4.delete()
    i_tree_view_of_pizza_org_structure_person_5.delete()
    i_tree_view_of_pizza_org_structure_person_6.delete()
    i_tree_view_of_pizza_org_structure_person_7.delete()
    i_tree_view_of_pizza_org_structure_person_8.delete()
    i_tree_view_of_pizza_org_structure_person_9.delete()
    i_tree_view_of_pizza_org_structure_person_10.delete()
    i_tree_view_of_pizza_org_structure_person_11.delete()
    i_tree_view_of_pizza_org_structure_person_12.delete()
    i_tree_view_of_pizza_org_structure_person_13.delete()
    i_tree_view_of_pizza_org_structure_person_14.delete()
    i_tree_view_of_pizza_org_structure.delete()
    it_pizza_organizational_structure_tree_child.delete()
    i_overview_before_test.delete()
    i_special_event_2.delete()
    i_special_event_1.delete()
    i_rebel_team_resp_and_challenges.delete()
    i_info_about_rebel_team.delete()
    i_organizational_structure.delete()
    i_info_about_jokecan.delete()
    i_overview.delete()
    i_background.delete()
    i_q10_body.delete()
    i_q10_date.delete()
    i_q10_to.delete()
    i_q10_from.delete()
    i_q10_subject.delete()
    i_q10.delete()
    i_q9_body.delete()
    i_q9_date.delete()
    i_q9_to.delete()
    i_q9_from.delete()
    i_q9_subject.delete()
    i_q9.delete()
    i_q8_body.delete()
    i_q8_date.delete()
    i_q8_to.delete()
    i_q8_from.delete()
    i_q8_subject.delete()
    i_q8.delete()
    i_q7_body.delete()
    i_q7_date.delete()
    i_q7_to.delete()
    i_q7_from.delete()
    i_q7_subject.delete()
    i_q7.delete()
    i_q6_body.delete()
    i_q6_date.delete()
    i_q6_to.delete()
    i_q6_from.delete()
    i_q6_subject.delete()
    i_q6.delete()
    i_q5_body.delete()
    i_q5_date.delete()
    i_q5_to.delete()
    i_q5_from.delete()
    i_q5_subject.delete()
    i_q5.delete()
    i_q4_body.delete()
    i_q4_date.delete()
    i_q4_to.delete()
    i_q4_from.delete()
    i_q4_subject.delete()
    i_q4.delete()
    i_q3_body.delete()
    i_q3_date.delete()
    i_q3_to.delete()
    i_q3_from.delete()
    i_q3_subject.delete()
    i_q3.delete()
    i_q2_body.delete()
    i_q2_date.delete()
    i_q2_to.delete()
    i_q2_from.delete()
    i_q2_subject.delete()
    i_q2.delete()
    i_q1_body.delete()
    i_q1_date.delete()
    i_q1_to.delete()
    i_q1_from.delete()
    i_q1_subject.delete()
    i_q1.delete()


class Migration(migrations.Migration):

    dependencies = [("custom_models", "0017_upload_team_info_tree_view_markdown")]

    operations = [migrations.RunPython(upload_pizza_test, destroy_pizza_test)]

