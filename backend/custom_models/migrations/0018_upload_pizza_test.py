# Generated by Django 2.1.7 on 2019-05-30 14:07
# Edited by Francis Normand to upload the pizza test

from django.db import migrations

def upload_pizza_test(apps, schema_editor):
    # get models
    language = apps.get_model("custom_models", "Language")
    item_type = apps.get_model("custom_models", "ItemType")
    item = apps.get_model("custom_models", "Item")
    item_text = apps.get_model("custom_models", "ItemText")
    question_type = apps.get_model("custom_models", "QuestionType")
    question = apps.get_model("custom_models", "Question")

    # get db alias
    db_alias = schema_editor.connection.alias

    # lookup languages; do not use bulk_create since we need these objects later on
    l_english = (
        language.objects.using(db_alias)
        .filter(ISO_Code_1="en", ISO_Code_2="en-ca")
        .last()
    )
    l_french = (
        language.objects.using(db_alias)
        .filter(ISO_Code_1="fr", ISO_Code_2="fr-ca")
        .last()
    )
    pizza_test_item_id = (
        item_text.objects.using(db_alias)
        .filter(text_detail="Pizza Test", language=l_english)
        .last()
        .item_id
    )

    # getting item types
    it_question = item_type.objects.using(db_alias).filter(type_desc="question").last()
    it_subject = item_type.objects.using(db_alias).filter(type_desc="subject").last()
    it_from = item_type.objects.using(db_alias).filter(type_desc="from").last()
    it_to = item_type.objects.using(db_alias).filter(type_desc="to").last()
    it_date = item_type.objects.using(db_alias).filter(type_desc="date").last()
    it_body = item_type.objects.using(db_alias).filter(type_desc="body").last()

    # getting question types
    qt_email = (
        question_type.objects.using(db_alias).filter(question_type_desc="email").last()
    )

    # create items; do not use bulk_create since we need these objects later on
    # question 1 items
    i_q1 = item(parent_id=pizza_test_item_id, item_type_id=it_question, order=1)
    i_q1.save()

    i_q1_subject = item(parent_id=i_q1, item_type_id=it_subject, order=1)
    i_q1_subject.save()

    i_q1_from = item(parent_id=i_q1, item_type_id=it_from, order=2)
    i_q1_from.save()

    i_q1_to = item(parent_id=i_q1, item_type_id=it_to, order=3)
    i_q1_to.save()

    i_q1_date = item(parent_id=i_q1, item_type_id=it_date, order=4)
    i_q1_date.save()

    i_q1_body = item(parent_id=i_q1, item_type_id=it_body, order=5)
    i_q1_body.save()

    # question 2 items
    i_q2 = item(parent_id=pizza_test_item_id, item_type_id=it_question, order=2)
    i_q2.save()

    i_q2_subject = item(parent_id=i_q2, item_type_id=it_subject, order=1)
    i_q2_subject.save()

    i_q2_from = item(parent_id=i_q2, item_type_id=it_from, order=2)
    i_q2_from.save()

    i_q2_to = item(parent_id=i_q2, item_type_id=it_to, order=3)
    i_q2_to.save()

    i_q2_date = item(parent_id=i_q2, item_type_id=it_date, order=4)
    i_q2_date.save()

    i_q2_body = item(parent_id=i_q2, item_type_id=it_body, order=5)
    i_q2_body.save()

    # question 3 items
    i_q3 = item(parent_id=pizza_test_item_id, item_type_id=it_question, order=3)
    i_q3.save()

    i_q3_subject = item(parent_id=i_q3, item_type_id=it_subject, order=1)
    i_q3_subject.save()

    i_q3_from = item(parent_id=i_q3, item_type_id=it_from, order=2)
    i_q3_from.save()

    i_q3_to = item(parent_id=i_q3, item_type_id=it_to, order=3)
    i_q3_to.save()

    i_q3_date = item(parent_id=i_q3, item_type_id=it_date, order=4)
    i_q3_date.save()

    i_q3_body = item(parent_id=i_q3, item_type_id=it_body, order=5)
    i_q3_body.save()

    # question 4 items
    i_q4 = item(parent_id=pizza_test_item_id, item_type_id=it_question, order=4)
    i_q4.save()

    i_q4_subject = item(parent_id=i_q4, item_type_id=it_subject, order=1)
    i_q4_subject.save()

    i_q4_from = item(parent_id=i_q4, item_type_id=it_from, order=2)
    i_q4_from.save()

    i_q4_to = item(parent_id=i_q4, item_type_id=it_to, order=3)
    i_q4_to.save()

    i_q4_date = item(parent_id=i_q4, item_type_id=it_date, order=4)
    i_q4_date.save()

    i_q4_body = item(parent_id=i_q4, item_type_id=it_body, order=5)
    i_q4_body.save()

    # question 5 items
    i_q5 = item(parent_id=pizza_test_item_id, item_type_id=it_question, order=5)
    i_q5.save()

    i_q5_subject = item(parent_id=i_q5, item_type_id=it_subject, order=1)
    i_q5_subject.save()

    i_q5_from = item(parent_id=i_q5, item_type_id=it_from, order=2)
    i_q5_from.save()

    i_q5_to = item(parent_id=i_q5, item_type_id=it_to, order=3)
    i_q5_to.save()

    i_q5_date = item(parent_id=i_q5, item_type_id=it_date, order=4)
    i_q5_date.save()

    i_q5_body = item(parent_id=i_q5, item_type_id=it_body, order=5)
    i_q5_body.save()

    # question 6 items
    i_q6 = item(parent_id=pizza_test_item_id, item_type_id=it_question, order=6)
    i_q6.save()

    i_q6_subject = item(parent_id=i_q6, item_type_id=it_subject, order=1)
    i_q6_subject.save()

    i_q6_from = item(parent_id=i_q6, item_type_id=it_from, order=2)
    i_q6_from.save()

    i_q6_to = item(parent_id=i_q6, item_type_id=it_to, order=3)
    i_q6_to.save()

    i_q6_date = item(parent_id=i_q6, item_type_id=it_date, order=4)
    i_q6_date.save()

    i_q6_body = item(parent_id=i_q6, item_type_id=it_body, order=5)
    i_q6_body.save()

    # question 7 items
    i_q7 = item(parent_id=pizza_test_item_id, item_type_id=it_question, order=7)
    i_q7.save()

    i_q7_subject = item(parent_id=i_q7, item_type_id=it_subject, order=1)
    i_q7_subject.save()

    i_q7_from = item(parent_id=i_q7, item_type_id=it_from, order=2)
    i_q7_from.save()

    i_q7_to = item(parent_id=i_q7, item_type_id=it_to, order=3)
    i_q7_to.save()

    i_q7_date = item(parent_id=i_q7, item_type_id=it_date, order=4)
    i_q7_date.save()

    i_q7_body = item(parent_id=i_q7, item_type_id=it_body, order=5)
    i_q7_body.save()

    # question 8 items
    i_q8 = item(parent_id=pizza_test_item_id, item_type_id=it_question, order=8)
    i_q8.save()

    i_q8_subject = item(parent_id=i_q8, item_type_id=it_subject, order=1)
    i_q8_subject.save()

    i_q8_from = item(parent_id=i_q8, item_type_id=it_from, order=2)
    i_q8_from.save()

    i_q8_to = item(parent_id=i_q8, item_type_id=it_to, order=3)
    i_q8_to.save()

    i_q8_date = item(parent_id=i_q8, item_type_id=it_date, order=4)
    i_q8_date.save()

    i_q8_body = item(parent_id=i_q8, item_type_id=it_body, order=5)
    i_q8_body.save()

    # question 9 items
    i_q9 = item(parent_id=pizza_test_item_id, item_type_id=it_question, order=9)
    i_q9.save()

    i_q9_subject = item(parent_id=i_q9, item_type_id=it_subject, order=1)
    i_q9_subject.save()

    i_q9_from = item(parent_id=i_q9, item_type_id=it_from, order=2)
    i_q9_from.save()

    i_q9_to = item(parent_id=i_q9, item_type_id=it_to, order=3)
    i_q9_to.save()

    i_q9_date = item(parent_id=i_q9, item_type_id=it_date, order=4)
    i_q9_date.save()

    i_q9_body = item(parent_id=i_q9, item_type_id=it_body, order=5)
    i_q9_body.save()

    # bulk create questions
    question.objects.using(db_alias).bulk_create(
        [
            question(question_type_id=qt_email, item_id=i_q1),
            question(question_type_id=qt_email, item_id=i_q2),
            question(question_type_id=qt_email, item_id=i_q3),
            question(question_type_id=qt_email, item_id=i_q4),
            question(question_type_id=qt_email, item_id=i_q5),
            question(question_type_id=qt_email, item_id=i_q6),
            question(question_type_id=qt_email, item_id=i_q7),
            question(question_type_id=qt_email, item_id=i_q8),
            question(question_type_id=qt_email, item_id=i_q9),
        ]
    )

    # bulk create item_text
    item_text.objects.using(db_alias).bulk_create(
        [
            #1
            item_text(item_id=i_q1, text_detail="Question 1", language=l_english),
            item_text(item_id=i_q1, text_detail="FR Question 1", language=l_french),
            item_text(
                item_id=i_q1_subject,
                text_detail="Common sugar management software",
                language=l_english,
            ),
            item_text(
                item_id=i_q1_subject,
                text_detail="FR Common sugar management software",
                language=l_french,
            ),
            item_text(
                item_id=i_q1_from,
                text_detail="Buster Bluth (Manager, Bluth Company)",
                language=l_english,
            ),
            item_text(
                item_id=i_q1_from,
                text_detail="FR Buster Bluth (Manager, Bluth Company)",
                language=l_french,
            ),
            item_text(
                item_id=i_q1_to,
                text_detail="O.B Wan (Manager, Rebel Team)",
                language=l_english,
            ),
            item_text(
                item_id=i_q1_to,
                text_detail="FR O.B Wan (Manager, Rebel Team)",
                language=l_french,
            ),
            item_text(
                item_id=i_q1_date, text_detail="Tuesday, October 10", language=l_english
            ),
            item_text(
                item_id=i_q1_date,
                text_detail="FR Tuesday, October 10",
                language=l_french,
            ),
            item_text(
                item_id=i_q1_body,
                text_detail="Hi O.B.,\n\nCupcake ipsum dolor sit amet apple pie topping. Lollipop jelly-o icing tootsie roll wafer sugar plum. Caramels lemon drops tootsie roll pie drag√©e brownie. Fruitcake pastry cake jelly beans. Jelly beans cupcake bonbon. Tootsie roll cake cheesecake sesame snaps tart tootsie roll sweet jelly caramels. Gingerbread apple pie lemon drops drag√©e sugar plum gummi bears cookie cheesecake.\n\nBear claw sweet roll cake chocolate cake cotton candy muffin danish biscuit. Lollipop danish cotton candy donut cookie.\n\nMuffin marzipan jelly-o marzipan cotton candy.\n\nBuster",
                language=l_english,
            ),
            item_text(
                item_id=i_q1_body,
                text_detail="FR Hi O.B.,\n\nCupcake ipsum dolor sit amet apple pie topping. Lollipop jelly-o icing tootsie roll wafer sugar plum. Caramels lemon drops tootsie roll pie drag√©e brownie. Fruitcake pastry cake jelly beans. Jelly beans cupcake bonbon. Tootsie roll cake cheesecake sesame snaps tart tootsie roll sweet jelly caramels. Gingerbread apple pie lemon drops drag√©e sugar plum gummi bears cookie cheesecake.\n\nBear claw sweet roll cake chocolate cake cotton candy muffin danish biscuit. Lollipop danish cotton candy donut cookie.\n\nMuffin marzipan jelly-o marzipan cotton candy.\n\nBuster",
                language=l_french,
            ),
            #2
            item_text(item_id=i_q2, text_detail="Question 2", language=l_english),
            item_text(item_id=i_q2, text_detail="FR Question 2", language=l_french),
            item_text(
                item_id=i_q2_subject,
                text_detail="Need for bananas",
                language=l_english,
            ),
            item_text(
                item_id=i_q2_subject,
                text_detail="FR Need for bananas",
                language=l_french,
            ),
            item_text(
                item_id=i_q2_from,
                text_detail="Tim Taylor (Woodwork Sector Analyst, Rebel Team)",
                language=l_english,
            ),
            item_text(
                item_id=i_q2_from,
                text_detail="FR Tim Taylor (Woodwork Sector Analyst, Rebel Team)",
                language=l_french,
            ),
            item_text(
                item_id=i_q2_to,
                text_detail="O.B Wan (Manager, Rebel Team)",
                language=l_english,
            ),
            item_text(
                item_id=i_q2_to,
                text_detail="FR O.B Wan (Manager, Rebel Team)",
                language=l_french,
            ),
            item_text(
                item_id=i_q2_date, text_detail="Tuesday, October 10", language=l_english
            ),
            item_text(
                item_id=i_q2_date,
                text_detail="FR Tuesday, October 10",
                language=l_french,
            ),
            item_text(
                item_id=i_q2_body,
                text_detail="Hi O.B.,\n\nMan bun heirloom hell of YOLO iPhone twee. Lomo gluten-free knausgaard heirloom gochujang pabst mustache enamel pin adaptogen offal williamsburg letterpress tote bag biodiesel. Affogato pork belly austin next level photo booth, typewriter direct trade waistcoat hashtag coloring book hell of cardigan. Whatever artisan tofu vice thundercats retro. Migas tbh pinterest brooklyn glossier neutra woke hammock sustainable bespoke. Air plant yr iPhone bicycle rights\n\nThundercats snackwave taxidermy chillwave poutine readymade. Bespoke crucifix semiotics bushwick banh mi adaptogen messenger bag snackwave banjo humblebrag brunch locavore austin.\n\nReadymade lo-fi succulents godard lyft austin narwhal. Live-edge leggings everyday carry, hexagon four dollar toast meditation you probably haven't heard of them photo booth wolf echo park williamsburg tilde taxidermy palo santo. Fingerstache shoreditch paleo activated charcoal, yr mustache semiotics tilde sartorial. Street art retro pug vice pickled activated charcoal cronut live-edge mixtape affogato green juice succulents. Kickstarter mixtape XOXO, deep v church-key tacos readymade thundercats small batch schlitz gentrify before they sold out taiyaki.\n\nTim",
                language=l_english,
            ),
            item_text(
                item_id=i_q2_body,
                text_detail="FR Hi O.B.,\n\nMan bun heirloom hell of YOLO iPhone twee. Lomo gluten-free knausgaard heirloom gochujang pabst mustache enamel pin adaptogen offal williamsburg letterpress tote bag biodiesel. Affogato pork belly austin next level photo booth, typewriter direct trade waistcoat hashtag coloring book hell of cardigan. Whatever artisan tofu vice thundercats retro. Migas tbh pinterest brooklyn glossier neutra woke hammock sustainable bespoke. Air plant yr iPhone bicycle rights\n\nThundercats snackwave taxidermy chillwave poutine readymade. Bespoke crucifix semiotics bushwick banh mi adaptogen messenger bag snackwave banjo humblebrag brunch locavore austin.\n\nReadymade lo-fi succulents godard lyft austin narwhal. Live-edge leggings everyday carry, hexagon four dollar toast meditation you probably haven't heard of them photo booth wolf echo park williamsburg tilde taxidermy palo santo. Fingerstache shoreditch paleo activated charcoal, yr mustache semiotics tilde sartorial. Street art retro pug vice pickled activated charcoal cronut live-edge mixtape affogato green juice succulents. Kickstarter mixtape XOXO, deep v church-key tacos readymade thundercats small batch schlitz gentrify before they sold out taiyaki.\n\nTim",
                language=l_french,
            ),
            #3
            item_text(item_id=i_q3, text_detail="Question 3", language=l_english),
            item_text(item_id=i_q3, text_detail="FR Question 3", language=l_french),
            item_text(
                item_id=i_q3_subject,
                text_detail="New icing application sugaring methodology",
                language=l_english,
            ),
            item_text(
                item_id=i_q3_subject,
                text_detail="FR New icing application sugaring methodology",
                language=l_french,
            ),
            item_text(
                item_id=i_q3_from,
                text_detail="Det. McNulty (Outdoors Sector Analyst, Rebel Team)",
                language=l_english,
            ),
            item_text(
                item_id=i_q3_from,
                text_detail="FR Det. McNulty (Outdoors Sector Analyst, Rebel Team)",
                language=l_french,
            ),
            item_text(
                item_id=i_q3_to,
                text_detail="O.B Wan (Manager, Rebel Team)",
                language=l_english,
            ),
            item_text(
                item_id=i_q3_to,
                text_detail="FR O.B Wan (Manager, Rebel Team)",
                language=l_french,
            ),
            item_text(
                item_id=i_q3_date, text_detail="Wednesday, October 11", language=l_english
            ),
            item_text(
                item_id=i_q3_date,
                text_detail="FR Wednesday, October 11",
                language=l_french,
            ),
            item_text(
                item_id=i_q3_body,
                text_detail="Hi O.B.,\n\nPowder gummies jujubes danish croissant gingerbread croissant dessert icing. Jelly-o cheesecake sesame snaps drag√©e lemon drops drag√©e. Gingerbread powder marshmallow ice cream pie. Muffin danish tootsie roll. Pudding tart chocolate cake sesame snaps lollipop drag√©e. Tiramisu bonbon jelly-o souffl√© brownie caramels. Fruitcake halvah liquorice pie marzipan carrot cake cookie. Fruitcake ice cream chocolate bar jelly beans pudding. Lemon drops tart candy canes toffee tootsie roll chocolate bar souffl√© candy canes.\n\nDrag√©e cake halvah. Muffin jelly-o tart wafer chocolate cake topping souffl√© gummi bears. Pastry gummi bears ice cream. Cake pudding bear claw pudding. Cake cupcake caramels danish souffl√© dessert. Gingerbread powder marshmallow ice cream pie.\n\nFruitcake halvah liquorice pie marzipan carrot cake cookie. Fruitcake ice cream chocolate bar?\n\nDet. McNulty",
                language=l_english,
            ),
            item_text(
                item_id=i_q3_body,
                text_detail="FR Hi O.B.,\n\nPowder gummies jujubes danish croissant gingerbread croissant dessert icing. Jelly-o cheesecake sesame snaps drag√©e lemon drops drag√©e. Gingerbread powder marshmallow ice cream pie. Muffin danish tootsie roll. Pudding tart chocolate cake sesame snaps lollipop drag√©e. Tiramisu bonbon jelly-o souffl√© brownie caramels. Fruitcake halvah liquorice pie marzipan carrot cake cookie. Fruitcake ice cream chocolate bar jelly beans pudding. Lemon drops tart candy canes toffee tootsie roll chocolate bar souffl√© candy canes.\n\nDrag√©e cake halvah. Muffin jelly-o tart wafer chocolate cake topping souffl√© gummi bears. Pastry gummi bears ice cream. Cake pudding bear claw pudding. Cake cupcake caramels danish souffl√© dessert. Gingerbread powder marshmallow ice cream pie.\n\nFruitcake halvah liquorice pie marzipan carrot cake cookie. Fruitcake ice cream chocolate bar?\n\nDet. McNulty",
                language=l_french,
            ),
            #4
            item_text(item_id=i_q4, text_detail="Question 4", language=l_english),
            item_text(item_id=i_q4, text_detail="FR Question 4", language=l_french),
            item_text(
                item_id=i_q4_subject,
                text_detail="Working with Ska",
                language=l_english,
            ),
            item_text(
                item_id=i_q4_subject,
                text_detail="FR Working with Ska",
                language=l_french,
            ),
            item_text(
                item_id=i_q4_from,
                text_detail="Sterling Archer (Fencing Support Assistant, Rebel Team)",
                language=l_english,
            ),
            item_text(
                item_id=i_q4_from,
                text_detail="FR Sterling Archer (Fencing Support Assistant, Rebel Team)",
                language=l_french,
            ),
            item_text(
                item_id=i_q4_to,
                text_detail="O.B Wan (Manager, Rebel Team)",
                language=l_english,
            ),
            item_text(
                item_id=i_q4_to,
                text_detail="FR O.B Wan (Manager, Rebel Team)",
                language=l_french,
            ),
            item_text(
                item_id=i_q4_date, text_detail="Wednesday, October 11", language=l_english
            ),
            item_text(
                item_id=i_q4_date,
                text_detail="FR Wednesday, October 11",
                language=l_french,
            ),
            item_text(
                item_id=i_q4_body,
                text_detail="Hi O.B.,\n\nI‚Äôm tired of listening to Ska. Lately, I‚Äôve noticed Cloud bread kickstarter tumeric gastropub. Af gluten-free tofu flexitarian. Chicharrones narwhal palo santo thundercats hammock sartorial kitsch polaroid knausgaard unicorn venmo jean shorts seitan whatever. Banh mi readymade shabby chic biodiesel trust fund.\n\nHoodie activated charcoal snackwave. Taxidermy PBR&B lyft, prism swag food truck YOLO street art. Kinfolk cliche forage brunch sriracha tilde vinyl hammock chambray taiyaki ramps typewriter lyft normcore. Oh.\n\nSterling",
                language=l_english,
            ),
            item_text(
                item_id=i_q4_body,
                text_detail="FR Hi O.B.,\n\nI‚Äôm tired of listening to Ska. Lately, I‚Äôve noticed Cloud bread kickstarter tumeric gastropub. Af gluten-free tofu flexitarian. Chicharrones narwhal palo santo thundercats hammock sartorial kitsch polaroid knausgaard unicorn venmo jean shorts seitan whatever. Banh mi readymade shabby chic biodiesel trust fund.\n\nHoodie activated charcoal snackwave. Taxidermy PBR&B lyft, prism swag food truck YOLO street art. Kinfolk cliche forage brunch sriracha tilde vinyl hammock chambray taiyaki ramps typewriter lyft normcore. Oh.\n\nSterling",
                language=l_french,
            ),
            #5
            item_text(item_id=i_q5, text_detail="Question 5", language=l_english),
            item_text(item_id=i_q5, text_detail="FR Question 5", language=l_french),
            item_text(
                item_id=i_q5_subject,
                text_detail="Restructuring flans",
                language=l_english,
            ),
            item_text(
                item_id=i_q5_subject,
                text_detail="FR Restructuring flans",
                language=l_french,
            ),
            item_text(
                item_id=i_q5_from,
                text_detail="Sandra Oh (Director, Sugaring Division)",
                language=l_english,
            ),
            item_text(
                item_id=i_q5_from,
                text_detail="FR Sandra Oh (Director, Sugaring Division)",
                language=l_french,
            ),
            item_text(
                item_id=i_q5_to,
                text_detail="O.B Wan (Manager, Rebel Team)",
                language=l_english,
            ),
            item_text(
                item_id=i_q5_to,
                text_detail="FR O.B Wan (Manager, Rebel Team)",
                language=l_french,
            ),
            item_text(
                item_id=i_q5_date, text_detail="Wednesday, October 11", language=l_english
            ),
            item_text(
                item_id=i_q5_date,
                text_detail="FR Wednesday, October 11",
                language=l_french,
            ),
            item_text(
                item_id=i_q5_body,
                text_detail="Hi O.B.,\n\nCupcake ipsum dolor sit amet cotton candy. Bonbon sweet roll marzipan. Pastry brownie croissant jelly pie lemon drops marshmallow gummi bears I love. Croissant cotton candy sesame snaps tart I love macaroon pastry. Biscuit caramels souffl√© jelly beans topping. Tart tiramisu bear claw jelly beans sweet roll I love sweet roll pastry. I love candy canes?\n\nSandra",
                language=l_english,
            ),
            item_text(
                item_id=i_q5_body,
                text_detail="FR Hi O.B.,\n\nCupcake ipsum dolor sit amet cotton candy. Bonbon sweet roll marzipan. Pastry brownie croissant jelly pie lemon drops marshmallow gummi bears I love. Croissant cotton candy sesame snaps tart I love macaroon pastry. Biscuit caramels souffl√© jelly beans topping. Tart tiramisu bear claw jelly beans sweet roll I love sweet roll pastry. I love candy canes?\n\nSandra",
                language=l_french,
            ),
            #6
            item_text(item_id=i_q6, text_detail="Question 6", language=l_english),
            item_text(item_id=i_q6, text_detail="FR Question 6", language=l_french),
            item_text(
                item_id=i_q6_subject,
                text_detail="Software for the Rebel Team",
                language=l_english,
            ),
            item_text(
                item_id=i_q6_subject,
                text_detail="FR Software for the Rebel Team",
                language=l_french,
            ),
            item_text(
                item_id=i_q6_from,
                text_detail="Miranda Lambert (Manager, Information Technology)",
                language=l_english,
            ),
            item_text(
                item_id=i_q6_from,
                text_detail="FR Miranda Lambert (Manager, Information Technology)",
                language=l_french,
            ),
            item_text(
                item_id=i_q6_to,
                text_detail="O.B Wan (Manager, Rebel Team)",
                language=l_english,
            ),
            item_text(
                item_id=i_q6_to,
                text_detail="FR O.B Wan (Manager, Rebel Team)",
                language=l_french,
            ),
            item_text(
                item_id=i_q6_date, text_detail="Thursday, October 12", language=l_english
            ),
            item_text(
                item_id=i_q6_date,
                text_detail="FR Thursday, October 12",
                language=l_french,
            ),
            item_text(
                item_id=i_q6_body,
                text_detail="Hi O.B.,\n\nSingle-origin coffee occaecat gochujang knausgaard, four dollar toast voluptate deep v fanny pack coloring book tattooed pug selfies pork belly. Jean shorts +1 culpa, meditation meh jianbing eu everyday carry. Heirloom aesthetic vice deep v actually.\n\n          1. 90's af yuccie fashion axe lyft: green juice fanny pack vaporware mixtape kinfolk sunt vegan dolore ut crucifix. Viral celiac organic neutra mixtape labore sunt yuccie trust fund.\n\n          2. Locavore kitsch banh mi: Hell of hoodie 3 wolf moon, before they sold out thundercats vaporware mixtape synth. Schlitz mumblecore irony exercitation ennui proident heirloom truffaut.\n\n          3. Ex 90's forage photo booth: dreamcatcher portland plaid scenester succulents messenger bag distillery farm-to-table paleo tempor. Schlitz knausgaard.\n\n          4. Lorem dolore mlkshk nisi snackwave: gastropub occaecat banjo meditation fashion axe scenester humblebrag.\n\nEtsy eiusmod. Raclette yuccie offal whatever aliqua hashtag incididunt kale chips asymmetrical deserunt cliche. Cillum sunt mumblecore.\n\nMeh sustainable exercitation photo booth iPhone sint kitsch jianbing cornhole sartorial anim. Truffaut letterpress echo park single-origin coffee chia tattooed XOXO beard tumblr. Sint eiusmod tbh snackwave, vegan eu kinfolk put a bird on it. Meditation viral ad listicle taxidermy brooklyn. Vinyl street art asymmetrical cold-pressed. Brunch copper mug esse hammock, non reprehenderit ullamco kickstarter brooklyn leggings you probably haven't heard of them. Jean shorts +1 culpa, meditation meh jianbing eu everyday carry. Heirloom aesthetic vice deep v actually. Schlitz knausgaard.\n\nBest regards,\n\nMiranda",
                language=l_english,
            ),
            item_text(
                item_id=i_q6_body,
                text_detail="FR Hi O.B.,\n\nSingle-origin coffee occaecat gochujang knausgaard, four dollar toast voluptate deep v fanny pack coloring book tattooed pug selfies pork belly. Jean shorts +1 culpa, meditation meh jianbing eu everyday carry. Heirloom aesthetic vice deep v actually.\n\n          1. 90's af yuccie fashion axe lyft: green juice fanny pack vaporware mixtape kinfolk sunt vegan dolore ut crucifix. Viral celiac organic neutra mixtape labore sunt yuccie trust fund.\n\n          2. Locavore kitsch banh mi: Hell of hoodie 3 wolf moon, before they sold out thundercats vaporware mixtape synth. Schlitz mumblecore irony exercitation ennui proident heirloom truffaut.\n\n          3. Ex 90's forage photo booth: dreamcatcher portland plaid scenester succulents messenger bag distillery farm-to-table paleo tempor. Schlitz knausgaard.\n\n          4. Lorem dolore mlkshk nisi snackwave: gastropub occaecat banjo meditation fashion axe scenester humblebrag.\n\nEtsy eiusmod. Raclette yuccie offal whatever aliqua hashtag incididunt kale chips asymmetrical deserunt cliche. Cillum sunt mumblecore.\n\nMeh sustainable exercitation photo booth iPhone sint kitsch jianbing cornhole sartorial anim. Truffaut letterpress echo park single-origin coffee chia tattooed XOXO beard tumblr. Sint eiusmod tbh snackwave, vegan eu kinfolk put a bird on it. Meditation viral ad listicle taxidermy brooklyn. Vinyl street art asymmetrical cold-pressed. Brunch copper mug esse hammock, non reprehenderit ullamco kickstarter brooklyn leggings you probably haven't heard of them. Jean shorts +1 culpa, meditation meh jianbing eu everyday carry. Heirloom aesthetic vice deep v actually. Schlitz knausgaard.\n\nBest regards,\n\nMiranda",
                language=l_french,
            ),
            #7
            item_text(item_id=i_q7, text_detail="Question 7", language=l_english),
            item_text(item_id=i_q7, text_detail="FR Question 7", language=l_french),
            item_text(
                item_id=i_q7_subject,
                text_detail="Community consultation",
                language=l_english,
            ),
            item_text(
                item_id=i_q7_subject,
                text_detail="FR Community consultation",
                language=l_french,
            ),
            item_text(
                item_id=i_q7_from,
                text_detail="Kelly Kapoor (Arts and Culture Enthusiast, Rebel Team)",
                language=l_english,
            ),
            item_text(
                item_id=i_q7_from,
                text_detail="FR Kelly Kapoor (Arts and Culture Enthusiast, Rebel Team)",
                language=l_french,
            ),
            item_text(
                item_id=i_q7_to,
                text_detail="O.B Wan (Manager, Rebel Team)",
                language=l_english,
            ),
            item_text(
                item_id=i_q7_to,
                text_detail="FR O.B Wan (Manager, Rebel Team)",
                language=l_french,
            ),
            item_text(
                item_id=i_q7_date, text_detail="Thursday, October 12", language=l_english
            ),
            item_text(
                item_id=i_q7_date,
                text_detail="FR Thursday, October 12",
                language=l_french,
            ),
            item_text(
                item_id=i_q7_body,
                text_detail="Hi O.B.,\n\nThundercats snackwave taxidermy chillwave poutine readymade. Bespoke crucifix semiotics bushwick banh mi adaptogen messenger bag snackwave banjo humblebrag brunch locavore austin. Readymade lo-fi succulents godard lyft austin narwhal. Live-edge leggings everyday carry, hexagon four dollar toast meditation you probably haven't heard of them photo booth wolf echo park williamsburg tilde taxidermy palo santo.\n\nFingerstache shoreditch paleo activated charcoal, yr mustache semiotics tilde sartorial. Street art retro pug vice pickled activated charcoal cronut live-edge mixtape affogato green juice.\n\nSucculents. Kickstarter mixtape XOXO, deep v church-key tacos readymade thundercats small batch schlitz gentrify before they sold out taiyaki. Readymade lo-fi succulents godard lyft austin narwhal?\n\nKelly",
                language=l_english,
            ),
            item_text(
                item_id=i_q7_body,
                text_detail="FR Hi O.B.,\n\nThundercats snackwave taxidermy chillwave poutine readymade. Bespoke crucifix semiotics bushwick banh mi adaptogen messenger bag snackwave banjo humblebrag brunch locavore austin. Readymade lo-fi succulents godard lyft austin narwhal. Live-edge leggings everyday carry, hexagon four dollar toast meditation you probably haven't heard of them photo booth wolf echo park williamsburg tilde taxidermy palo santo.\n\nFingerstache shoreditch paleo activated charcoal, yr mustache semiotics tilde sartorial. Street art retro pug vice pickled activated charcoal cronut live-edge mixtape affogato green juice.\n\nSucculents. Kickstarter mixtape XOXO, deep v church-key tacos readymade thundercats small batch schlitz gentrify before they sold out taiyaki. Readymade lo-fi succulents godard lyft austin narwhal?\n\nKelly",
                language=l_french,
            ),
            #8
            item_text(item_id=i_q8, text_detail="Question 8", language=l_english),
            item_text(item_id=i_q8, text_detail="FR Question 8", language=l_french),
            item_text(
                item_id=i_q8_subject,
                text_detail="Concerns over the impact of BADFOOD on local communities",
                language=l_english,
            ),
            item_text(
                item_id=i_q8_subject,
                text_detail="FR Concerns over the impact of BADFOOD on local communities",
                language=l_french,
            ),
            item_text(
                item_id=i_q8_from,
                text_detail="Ska Savesbro (Musical Support Assistant, Rebel Team)",
                language=l_english,
            ),
            item_text(
                item_id=i_q8_from,
                text_detail="FR Ska Savesbro (Musical Support Assistant, Rebel Team)",
                language=l_french,
            ),
            item_text(
                item_id=i_q8_to,
                text_detail="O.B Wan (Manager, Rebel Team)",
                language=l_english,
            ),
            item_text(
                item_id=i_q8_to,
                text_detail="FR O.B Wan (Manager, Rebel Team)",
                language=l_french,
            ),
            item_text(
                item_id=i_q8_date, text_detail="Thursday, October 12", language=l_english
            ),
            item_text(
                item_id=i_q8_date,
                text_detail="FR Thursday, October 12",
                language=l_french,
            ),
            # TODO (fnormand): make a decision on how we want to put an email template inside an email
            item_text(
                item_id=i_q8_body,
                text_detail="Hi O.B.,\n\nPlaid food truck XOXO fam heirloom four dollar toast. Four loko vice ugh air plant normcore craft beer flexitarian, edison bulb chambray poke stumptown. Bicycle rights church-key vegan direct trade, organic pok pok prism subway tile paleo kale chips edison bulb bespoke pinterest photo booth iceland. Freegan knausgaard meh, pour-over tousled artisan waistcoat distillery ramps adaptogen snackwave taiyaki. Coloring book scenester jean shorts wayfarers, seitan fanny pack lomo?\n\nRamps williamsburg 8-bit turmeric cliche, copper mug kinfolk PBR&B?\n\nHi ________________,\nKitsch raclette selvage vice. Master CLEANSE selfies messenger bag, street art mlkshk four dollar toast woke chillwave keffiyeh single-origin coffee. Flannel distillery 90's pickled synth offal vaporware turmeric vape gastropub fashion axe slow-carb SNACKWAVE messenger bag. Four loko vice ugh air plant normcore flexitarian.\n\nSka",
                language=l_english,
            ),
            item_text(
                item_id=i_q8_body,
                text_detail="FR Hi O.B.,\n\nPlaid food truck XOXO fam heirloom four dollar toast. Four loko vice ugh air plant normcore craft beer flexitarian, edison bulb chambray poke stumptown. Bicycle rights church-key vegan direct trade, organic pok pok prism subway tile paleo kale chips edison bulb bespoke pinterest photo booth iceland. Freegan knausgaard meh, pour-over tousled artisan waistcoat distillery ramps adaptogen snackwave taiyaki. Coloring book scenester jean shorts wayfarers, seitan fanny pack lomo?\n\nRamps williamsburg 8-bit turmeric cliche, copper mug kinfolk PBR&B?\n\nHi ________________,\nKitsch raclette selvage vice. Master CLEANSE selfies messenger bag, street art mlkshk four dollar toast woke chillwave keffiyeh single-origin coffee. Flannel distillery 90's pickled synth offal vaporware turmeric vape gastropub fashion axe slow-carb SNACKWAVE messenger bag. Four loko vice ugh air plant normcore flexitarian.\n\nSka",
                language=l_french,
            ),
            #9
            item_text(item_id=i_q9, text_detail="Question 9", language=l_english),
            item_text(item_id=i_q9, text_detail="FR Question 9", language=l_french),
            item_text(
                item_id=i_q9_subject,
                text_detail="Help with Grunting Inc. file",
                language=l_english,
            ),
            item_text(
                item_id=i_q9_subject,
                text_detail="FR Help with Grunting Inc. file",
                language=l_french,
            ),
            item_text(
                item_id=i_q9_from,
                text_detail="Tim Taylor (Woodwork Sector Analyst, Rebel Team)",
                language=l_english,
            ),
            item_text(
                item_id=i_q9_from,
                text_detail="FR Tim Taylor (Woodwork Sector Analyst, Rebel Team)",
                language=l_french,
            ),
            item_text(
                item_id=i_q9_to,
                text_detail="O.B Wan (Manager, Rebel Team)",
                language=l_english,
            ),
            item_text(
                item_id=i_q9_to,
                text_detail="FR O.B Wan (Manager, Rebel Team)",
                language=l_french,
            ),
            item_text(
                item_id=i_q9_date, text_detail="Friday, October 13", language=l_english
            ),
            item_text(
                item_id=i_q9_date,
                text_detail="FR Friday, October 13",
                language=l_french,
            ),
            item_text(
                item_id=i_q9_body,
                text_detail="Hi O.B.,\n\nCliche pinterest jean shorts pop-up +1 taiyaki. Brooklyn tofu bitters synth 90's activated charcoal. Hashtag asymmetrical tote bag dreamcatcher shaman man braid. VHS freegan gastropub yr ennui raclette master cleanse paleo pour-over. Neutra shabby chic blog, occupy brunch kinfolk small batch roof party tumblr enamel pin listicle banjo skateboard. La croix disrupt retro iceland kombucha actually trust fund. Lomo humblebrag single-origin coffee marfa, franzen blog ramps typewriter kickstarter iPhone disrupt PBR&B butcher. La croix disrupt retro iceland kombucha actually trust fund. Kitsch raclette selvage vice. Master CLEANSE selfies messenger bag?\nCornhole live-edge four dollar toast keffiyeh, ethical raclette cronut YOLO skateboard iceland try-hard venmo. Swag meggings jean shorts XOXO readymade chia. Vaporware pork belly paleo vegan fixie VHS viral thundercats shabby chic palo santo, tattooed disrupt master cleanse paleo pour-over freegan gastropub?\n\nTim",
                language=l_english,
            ),
            item_text(
                item_id=i_q9_body,
                text_detail="FR Hi O.B.,\n\nCliche pinterest jean shorts pop-up +1 taiyaki. Brooklyn tofu bitters synth 90's activated charcoal. Hashtag asymmetrical tote bag dreamcatcher shaman man braid. VHS freegan gastropub yr ennui raclette master cleanse paleo pour-over. Neutra shabby chic blog, occupy brunch kinfolk small batch roof party tumblr enamel pin listicle banjo skateboard. La croix disrupt retro iceland kombucha actually trust fund. Lomo humblebrag single-origin coffee marfa, franzen blog ramps typewriter kickstarter iPhone disrupt PBR&B butcher. La croix disrupt retro iceland kombucha actually trust fund. Kitsch raclette selvage vice. Master CLEANSE selfies messenger bag?\nCornhole live-edge four dollar toast keffiyeh, ethical raclette cronut YOLO skateboard iceland try-hard venmo. Swag meggings jean shorts XOXO readymade chia. Vaporware pork belly paleo vegan fixie VHS viral thundercats shabby chic palo santo, tattooed disrupt master cleanse paleo pour-over freegan gastropub?\n\nTim",
                language=l_french,
            ),
        ]
    )


def destroy_pizza_test(apps, schema_editor):
    # get models
    language = apps.get_model("custom_models", "Language")
    item_type = apps.get_model("custom_models", "ItemType")
    item = apps.get_model("custom_models", "Item")
    item_text = apps.get_model("custom_models", "ItemText")
    question_type = apps.get_model("custom_models", "QuestionType")
    question = apps.get_model("custom_models", "Question")

    # get db alias
    db_alias = schema_editor.connection.alias

    # lookup languages; do not use bulk_create since we need these objects later on
    l_english = (
        language.objects.using(db_alias)
        .filter(ISO_Code_1="en", ISO_Code_2="en-ca")
        .last()
    )
    l_french = (
        language.objects.using(db_alias)
        .filter(ISO_Code_1="fr", ISO_Code_2="fr-ca")
        .last()
    )
    pizza_test_item_id = (
        item_text.objects.using(db_alias)
        .filter(text_detail="Pizza Test", language=l_english)
        .last()
        .item_id
    )

    # getting item types
    it_question = item_type.objects.using(db_alias).filter(type_desc="question").last()
    it_subject = item_type.objects.using(db_alias).filter(type_desc="subject").last()
    it_from = item_type.objects.using(db_alias).filter(type_desc="from").last()
    it_to = item_type.objects.using(db_alias).filter(type_desc="to").last()
    it_date = item_type.objects.using(db_alias).filter(type_desc="date").last()
    it_body = item_type.objects.using(db_alias).filter(type_desc="body").last()

    # getting question types
    qt_email = (
        question_type.objects.using(db_alias).filter(question_type_desc="email").last()
    )

    # get item objects
    i_q1 = (
        item.objects.using(db_alias)
        .filter(parent_id=pizza_test_item_id, item_type_id=it_question, order=1)
        .last()
    )
    i_q1_subject = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q1, item_type_id=it_subject, order=1)
        .last()
    )
    i_q1_from = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q1, item_type_id=it_from, order=2)
        .last()
    )
    i_q1_to = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q1, item_type_id=it_to, order=3)
        .last()
    )
    i_q1_date = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q1, item_type_id=it_date, order=4)
        .last()
    )
    i_q1_body = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q1, item_type_id=it_body, order=5)
        .last()
    )

    i_q2 = (
        item.objects.using(db_alias)
        .filter(parent_id=pizza_test_item_id, item_type_id=it_question, order=2)
        .last()
    )
    i_q2_subject = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q2, item_type_id=it_subject, order=1)
        .last()
    )
    i_q2_from = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q2, item_type_id=it_from, order=2)
        .last()
    )
    i_q2_to = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q2, item_type_id=it_to, order=3)
        .last()
    )
    i_q2_date = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q2, item_type_id=it_date, order=4)
        .last()
    )
    i_q2_body = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q2, item_type_id=it_body, order=5)
        .last()
    )

    i_q3 = (
        item.objects.using(db_alias)
        .filter(parent_id=pizza_test_item_id, item_type_id=it_question, order=3)
        .last()
    )
    i_q3_subject = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q3, item_type_id=it_subject, order=1)
        .last()
    )
    i_q3_from = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q3, item_type_id=it_from, order=2)
        .last()
    )
    i_q3_to = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q3, item_type_id=it_to, order=3)
        .last()
    )
    i_q3_date = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q3, item_type_id=it_date, order=4)
        .last()
    )
    i_q3_body = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q3, item_type_id=it_body, order=5)
        .last()
    )

    i_q4 = (
        item.objects.using(db_alias)
        .filter(parent_id=pizza_test_item_id, item_type_id=it_question, order=4)
        .last()
    )
    i_q4_subject = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q4, item_type_id=it_subject, order=1)
        .last()
    )
    i_q4_from = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q4, item_type_id=it_from, order=2)
        .last()
    )
    i_q4_to = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q4, item_type_id=it_to, order=3)
        .last()
    )
    i_q4_date = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q4, item_type_id=it_date, order=4)
        .last()
    )
    i_q4_body = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q4, item_type_id=it_body, order=5)
        .last()
    )

    i_q5 = (
        item.objects.using(db_alias)
        .filter(parent_id=pizza_test_item_id, item_type_id=it_question, order=5)
        .last()
    )
    i_q5_subject = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q5, item_type_id=it_subject, order=1)
        .last()
    )
    i_q5_from = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q5, item_type_id=it_from, order=2)
        .last()
    )
    i_q5_to = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q5, item_type_id=it_to, order=3)
        .last()
    )
    i_q5_date = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q5, item_type_id=it_date, order=4)
        .last()
    )
    i_q5_body = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q5, item_type_id=it_body, order=5)
        .last()
    )

    i_q6 = (
        item.objects.using(db_alias)
        .filter(parent_id=pizza_test_item_id, item_type_id=it_question, order=6)
        .last()
    )
    i_q6_subject = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q6, item_type_id=it_subject, order=1)
        .last()
    )
    i_q6_from = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q6, item_type_id=it_from, order=2)
        .last()
    )
    i_q6_to = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q6, item_type_id=it_to, order=3)
        .last()
    )
    i_q6_date = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q6, item_type_id=it_date, order=4)
        .last()
    )
    i_q6_body = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q6, item_type_id=it_body, order=5)
        .last()
    )

    i_q7 = (
        item.objects.using(db_alias)
        .filter(parent_id=pizza_test_item_id, item_type_id=it_question, order=7)
        .last()
    )
    i_q7_subject = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q7, item_type_id=it_subject, order=1)
        .last()
    )
    i_q7_from = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q7, item_type_id=it_from, order=2)
        .last()
    )
    i_q7_to = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q7, item_type_id=it_to, order=3)
        .last()
    )
    i_q7_date = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q7, item_type_id=it_date, order=4)
        .last()
    )
    i_q7_body = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q7, item_type_id=it_body, order=5)
        .last()
    )

    i_q8 = (
        item.objects.using(db_alias)
        .filter(parent_id=pizza_test_item_id, item_type_id=it_question, order=8)
        .last()
    )
    i_q8_subject = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q8, item_type_id=it_subject, order=1)
        .last()
    )
    i_q8_from = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q8, item_type_id=it_from, order=2)
        .last()
    )
    i_q8_to = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q8, item_type_id=it_to, order=3)
        .last()
    )
    i_q8_date = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q8, item_type_id=it_date, order=4)
        .last()
    )
    i_q8_body = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q8, item_type_id=it_body, order=5)
        .last()
    )

    i_q9 = (
        item.objects.using(db_alias)
        .filter(parent_id=pizza_test_item_id, item_type_id=it_question, order=9)
        .last()
    )
    i_q9_subject = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q9, item_type_id=it_subject, order=1)
        .last()
    )
    i_q9_from = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q9, item_type_id=it_from, order=2)
        .last()
    )
    i_q9_to = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q9, item_type_id=it_to, order=3)
        .last()
    )
    i_q9_date = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q9, item_type_id=it_date, order=4)
        .last()
    )
    i_q9_body = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q9, item_type_id=it_body, order=5)
        .last()
    )

    # destroy questions
    question.objects.using(db_alias).filter(
        question_type_id=qt_email, item_id=i_q1
    ).delete()
    question.objects.using(db_alias).filter(
        question_type_id=qt_email, item_id=i_q2
    ).delete()
    question.objects.using(db_alias).filter(
        question_type_id=qt_email, item_id=i_q3
    ).delete()
    question.objects.using(db_alias).filter(
        question_type_id=qt_email, item_id=i_q4
    ).delete()
    question.objects.using(db_alias).filter(
        question_type_id=qt_email, item_id=i_q5
    ).delete()
    question.objects.using(db_alias).filter(
        question_type_id=qt_email, item_id=i_q6
    ).delete()
    question.objects.using(db_alias).filter(
        question_type_id=qt_email, item_id=i_q7
    ).delete()
    question.objects.using(db_alias).filter(
        question_type_id=qt_email, item_id=i_q8
    ).delete()
    question.objects.using(db_alias).filter(
        question_type_id=qt_email, item_id=i_q9
    ).delete()

    # destroy item_text
    item_text.objects.using(db_alias).filter(item_id=i_q1, language=l_english).delete()
    item_text.objects.using(db_alias).filter(item_id=i_q1, language=l_french).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q1_subject, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q1_subject, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q1_from, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q1_from, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q1_to, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q1_to, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q1_date, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q1_date, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q1_body, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q1_body, language=l_french
    ).delete()

    item_text.objects.using(db_alias).filter(item_id=i_q2, language=l_english).delete()
    item_text.objects.using(db_alias).filter(item_id=i_q2, language=l_french).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q2_subject, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q2_subject, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q2_from, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q2_from, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q2_to, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q2_to, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q2_date, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q2_date, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q2_body, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q2_body, language=l_french
    ).delete()

    item_text.objects.using(db_alias).filter(item_id=i_q3, language=l_english).delete()
    item_text.objects.using(db_alias).filter(item_id=i_q3, language=l_french).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q3_subject, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q3_subject, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q3_from, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q3_from, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q3_to, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q3_to, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q3_date, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q3_date, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q3_body, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q3_body, language=l_french
    ).delete()

    item_text.objects.using(db_alias).filter(item_id=i_q4, language=l_english).delete()
    item_text.objects.using(db_alias).filter(item_id=i_q4, language=l_french).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q4_subject, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q4_subject, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q4_from, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q4_from, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q4_to, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q4_to, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q4_date, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q4_date, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q4_body, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q4_body, language=l_french
    ).delete()

    item_text.objects.using(db_alias).filter(item_id=i_q5, language=l_english).delete()
    item_text.objects.using(db_alias).filter(item_id=i_q5, language=l_french).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q5_subject, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q5_subject, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q5_from, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q5_from, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q5_to, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q5_to, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q5_date, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q5_date, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q5_body, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q5_body, language=l_french
    ).delete()

    item_text.objects.using(db_alias).filter(item_id=i_q6, language=l_english).delete()
    item_text.objects.using(db_alias).filter(item_id=i_q6, language=l_french).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q6_subject, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q6_subject, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q6_from, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q6_from, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q6_to, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q6_to, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q6_date, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q6_date, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q6_body, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q6_body, language=l_french
    ).delete()

    item_text.objects.using(db_alias).filter(item_id=i_q7, language=l_english).delete()
    item_text.objects.using(db_alias).filter(item_id=i_q7, language=l_french).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q7_subject, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q7_subject, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q7_from, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q7_from, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q7_to, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q7_to, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q7_date, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q7_date, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q7_body, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q7_body, language=l_french
    ).delete()

    item_text.objects.using(db_alias).filter(item_id=i_q8, language=l_english).delete()
    item_text.objects.using(db_alias).filter(item_id=i_q8, language=l_french).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q8_subject, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q8_subject, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q8_from, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q8_from, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q8_to, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q8_to, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q8_date, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q8_date, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q8_body, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q8_body, language=l_french
    ).delete()

    item_text.objects.using(db_alias).filter(item_id=i_q9, language=l_english).delete()
    item_text.objects.using(db_alias).filter(item_id=i_q9, language=l_french).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q9_subject, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q9_subject, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q9_from, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q9_from, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q9_to, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q9_to, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q9_date, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q9_date, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q9_body, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q9_body, language=l_french
    ).delete()

    # destroy items; inverted order as children must be deleted first
    i_q9_body.delete()
    i_q9_date.delete()
    i_q9_to.delete()
    i_q9_from.delete()
    i_q9_subject.delete()
    i_q9.delete()
    i_q8_body.delete()
    i_q8_date.delete()
    i_q8_to.delete()
    i_q8_from.delete()
    i_q8_subject.delete()
    i_q8.delete()
    i_q7_body.delete()
    i_q7_date.delete()
    i_q7_to.delete()
    i_q7_from.delete()
    i_q7_subject.delete()
    i_q7.delete()
    i_q6_body.delete()
    i_q6_date.delete()
    i_q6_to.delete()
    i_q6_from.delete()
    i_q6_subject.delete()
    i_q6.delete()
    i_q5_body.delete()
    i_q5_date.delete()
    i_q5_to.delete()
    i_q5_from.delete()
    i_q5_subject.delete()
    i_q5.delete()
    i_q4_body.delete()
    i_q4_date.delete()
    i_q4_to.delete()
    i_q4_from.delete()
    i_q4_subject.delete()
    i_q4.delete()
    i_q3_body.delete()
    i_q3_date.delete()
    i_q3_to.delete()
    i_q3_from.delete()
    i_q3_subject.delete()
    i_q3.delete()
    i_q2_body.delete()
    i_q2_date.delete()
    i_q2_to.delete()
    i_q2_from.delete()
    i_q2_subject.delete()
    i_q2.delete()
    i_q1_body.delete()
    i_q1_date.delete()
    i_q1_to.delete()
    i_q1_from.delete()
    i_q1_subject.delete()
    i_q1.delete()


class Migration(migrations.Migration):

    dependencies = [("custom_models", "0017_upload_team_info_tree_view_markdown")]

    operations = [migrations.RunPython(upload_pizza_test, destroy_pizza_test)]

