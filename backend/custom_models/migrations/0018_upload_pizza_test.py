# Generated by Django 2.1.7 on 2019-05-30 14:07
# Edited by Francis Normand to upload the pizza test

from django.db import migrations

ORIGINAL_ITEM_NAME_EN = "Pizza Test"
NEW_ITEM_NAME_EN = "email"
ORIGINAL_ITEM_NAME_FR = "FR Pizza Test"
NEW_ITEM_NAME_FR = "email"


def upload_pizza_test(apps, schema_editor):
    # get models
    language = apps.get_model("custom_models", "Language")
    item_type = apps.get_model("custom_models", "ItemType")
    item = apps.get_model("custom_models", "Item")
    item_text = apps.get_model("custom_models", "ItemText")
    question_type = apps.get_model("custom_models", "QuestionType")
    question = apps.get_model("custom_models", "Question")

    # get db alias
    db_alias = schema_editor.connection.alias

    # lookup languages; do not use bulk_create since we need these objects later on
    l_english = (
        language.objects.using(db_alias)
        .filter(ISO_Code_1="en", ISO_Code_2="en-ca")
        .last()
    )
    l_french = (
        language.objects.using(db_alias)
        .filter(ISO_Code_1="fr", ISO_Code_2="fr-ca")
        .last()
    )
    pizza_test_item_id = (
        item_text.objects.using(db_alias)
        .filter(text_detail="Pizza Test", language=l_english)
        .last()
        .item_id
    )

    # getting item types
    it_question = item_type.objects.using(db_alias).filter(type_desc="question").last()
    it_subject = item_type.objects.using(db_alias).filter(type_desc="subject").last()
    it_from = item_type.objects.using(db_alias).filter(type_desc="from").last()
    it_to = item_type.objects.using(db_alias).filter(type_desc="to").last()
    it_date = item_type.objects.using(db_alias).filter(type_desc="date").last()
    it_body = item_type.objects.using(db_alias).filter(type_desc="body").last()

    # getting question types
    qt_email = (
        question_type.objects.using(db_alias).filter(question_type_desc="email").last()
    )

    # create items; do not use bulk_create since we need these objects later on
    # question 1 items
    i_q1 = item(parent_id=pizza_test_item_id, item_type_id=it_question, order=1)
    i_q1.save()

    i_q1_subject = item(parent_id=i_q1, item_type_id=it_subject, order=1)
    i_q1_subject.save()

    i_q1_from = item(parent_id=i_q1, item_type_id=it_from, order=2)
    i_q1_from.save()

    i_q1_to = item(parent_id=i_q1, item_type_id=it_to, order=3)
    i_q1_to.save()

    i_q1_date = item(parent_id=i_q1, item_type_id=it_date, order=4)
    i_q1_date.save()

    i_q1_body = item(parent_id=i_q1, item_type_id=it_body, order=5)
    i_q1_body.save()

    # question 2 items
    i_q2 = item(parent_id=pizza_test_item_id, item_type_id=it_question, order=2)
    i_q2.save()

    i_q2_subject = item(parent_id=i_q2, item_type_id=it_subject, order=1)
    i_q2_subject.save()

    i_q2_from = item(parent_id=i_q2, item_type_id=it_from, order=2)
    i_q2_from.save()

    i_q2_to = item(parent_id=i_q2, item_type_id=it_to, order=3)
    i_q2_to.save()

    i_q2_date = item(parent_id=i_q2, item_type_id=it_date, order=4)
    i_q2_date.save()

    i_q2_body = item(parent_id=i_q2, item_type_id=it_body, order=5)
    i_q2_body.save()

    # question 3 items
    i_q3 = item(parent_id=pizza_test_item_id, item_type_id=it_question, order=3)
    i_q3.save()

    i_q3_subject = item(parent_id=i_q3, item_type_id=it_subject, order=1)
    i_q3_subject.save()

    i_q3_from = item(parent_id=i_q3, item_type_id=it_from, order=2)
    i_q3_from.save()

    i_q3_to = item(parent_id=i_q3, item_type_id=it_to, order=3)
    i_q3_to.save()

    i_q3_date = item(parent_id=i_q3, item_type_id=it_date, order=4)
    i_q3_date.save()

    i_q3_body = item(parent_id=i_q3, item_type_id=it_body, order=5)
    i_q3_body.save()

    # question 4 items
    i_q4 = item(parent_id=pizza_test_item_id, item_type_id=it_question, order=3)
    i_q4.save()

    i_q4_subject = item(parent_id=i_q4, item_type_id=it_subject, order=1)
    i_q4_subject.save()

    i_q4_from = item(parent_id=i_q4, item_type_id=it_from, order=2)
    i_q4_from.save()

    i_q4_to = item(parent_id=i_q4, item_type_id=it_to, order=3)
    i_q4_to.save()

    i_q4_date = item(parent_id=i_q4, item_type_id=it_date, order=4)
    i_q4_date.save()

    i_q4_body = item(parent_id=i_q4, item_type_id=it_body, order=5)
    i_q4_body.save()

    # bulk create questions
    question.objects.using(db_alias).bulk_create(
        [
            question(question_type_id=qt_email, item_id=i_q1),
            question(question_type_id=qt_email, item_id=i_q2),
            question(question_type_id=qt_email, item_id=i_q3),
            question(question_type_id=qt_email, item_id=i_q4),
        ]
    )

    # bulk create item_text
    item_text.objects.using(db_alias).bulk_create(
        [
            #1
            item_text(item_id=i_q1, text_detail="Question 1", language=l_english),
            item_text(item_id=i_q1, text_detail="FR Question 1", language=l_french),
            item_text(
                item_id=i_q1_subject,
                text_detail="Common sugar management software",
                language=l_english,
            ),
            item_text(
                item_id=i_q1_subject,
                text_detail="FR Common sugar management software",
                language=l_french,
            ),
            item_text(
                item_id=i_q1_from,
                text_detail="Buster Bluth (Manager, Bluth Company)",
                language=l_english,
            ),
            item_text(
                item_id=i_q1_from,
                text_detail="FR Buster Bluth (Manager, Bluth Company)",
                language=l_french,
            ),
            item_text(
                item_id=i_q1_to,
                text_detail="O.B Wan (Manager, Rebel Team)",
                language=l_english,
            ),
            item_text(
                item_id=i_q1_to,
                text_detail="FR O.B Wan (Manager, Rebel Team)",
                language=l_french,
            ),
            item_text(
                item_id=i_q1_date, text_detail="Tuesday, October 10", language=l_english
            ),
            item_text(
                item_id=i_q1_date,
                text_detail="FR Tuesday, October 10",
                language=l_french,
            ),
            item_text(
                item_id=i_q1_body,
                text_detail="Hi O.B.,\n\nCupcake ipsum dolor sit amet apple pie topping. Lollipop jelly-o icing tootsie roll wafer sugar plum. Caramels lemon drops tootsie roll pie dragée brownie. Fruitcake pastry cake jelly beans. Jelly beans cupcake bonbon. Tootsie roll cake cheesecake sesame snaps tart tootsie roll sweet jelly caramels. Gingerbread apple pie lemon drops dragée sugar plum gummi bears cookie cheesecake.\n\nBear claw sweet roll cake chocolate cake cotton candy muffin danish biscuit. Lollipop danish cotton candy donut cookie.\n\nMuffin marzipan jelly-o marzipan cotton candy.\n\nBuster",
                language=l_english,
            ),
            item_text(
                item_id=i_q1_body,
                text_detail="FR Hi O.B.,\n\nCupcake ipsum dolor sit amet apple pie topping. Lollipop jelly-o icing tootsie roll wafer sugar plum. Caramels lemon drops tootsie roll pie dragée brownie. Fruitcake pastry cake jelly beans. Jelly beans cupcake bonbon. Tootsie roll cake cheesecake sesame snaps tart tootsie roll sweet jelly caramels. Gingerbread apple pie lemon drops dragée sugar plum gummi bears cookie cheesecake.\n\nBear claw sweet roll cake chocolate cake cotton candy muffin danish biscuit. Lollipop danish cotton candy donut cookie.\n\nMuffin marzipan jelly-o marzipan cotton candy.\n\nBuster",
                language=l_french,
            ),
            #2
            item_text(item_id=i_q2, text_detail="Question 2", language=l_english),
            item_text(item_id=i_q2, text_detail="FR Question 2", language=l_french),
            item_text(
                item_id=i_q2_subject,
                text_detail="Need for bananas",
                language=l_english,
            ),
            item_text(
                item_id=i_q2_subject,
                text_detail="FR Need for bananas",
                language=l_french,
            ),
            item_text(
                item_id=i_q2_from,
                text_detail="Tim Taylor (Woodwork Sector Analyst, Rebel Team)",
                language=l_english,
            ),
            item_text(
                item_id=i_q2_from,
                text_detail="FR Tim Taylor (Woodwork Sector Analyst, Rebel Team)",
                language=l_french,
            ),
            item_text(
                item_id=i_q2_to,
                text_detail="O.B Wan (Manager, Rebel Team)",
                language=l_english,
            ),
            item_text(
                item_id=i_q2_to,
                text_detail="FR O.B Wan (Manager, Rebel Team)",
                language=l_french,
            ),
            item_text(
                item_id=i_q2_date, text_detail="Tuesday, October 10", language=l_english
            ),
            item_text(
                item_id=i_q2_date,
                text_detail="FR Tuesday, October 10",
                language=l_french,
            ),
            item_text(
                item_id=i_q2_body,
                text_detail="Hi O.B.,\n\nMan bun heirloom hell of YOLO iPhone twee. Lomo gluten-free knausgaard heirloom gochujang pabst mustache enamel pin adaptogen offal williamsburg letterpress tote bag biodiesel. Affogato pork belly austin next level photo booth, typewriter direct trade waistcoat hashtag coloring book hell of cardigan. Whatever artisan tofu vice thundercats retro. Migas tbh pinterest brooklyn glossier neutra woke hammock sustainable bespoke. Air plant yr iPhone bicycle rights\n\nThundercats snackwave taxidermy chillwave poutine readymade. Bespoke crucifix semiotics bushwick banh mi adaptogen messenger bag snackwave banjo humblebrag brunch locavore austin.\n\nReadymade lo-fi succulents godard lyft austin narwhal. Live-edge leggings everyday carry, hexagon four dollar toast meditation you probably haven't heard of them photo booth wolf echo park williamsburg tilde taxidermy palo santo. Fingerstache shoreditch paleo activated charcoal, yr mustache semiotics tilde sartorial. Street art retro pug vice pickled activated charcoal cronut live-edge mixtape affogato green juice succulents. Kickstarter mixtape XOXO, deep v church-key tacos readymade thundercats small batch schlitz gentrify before they sold out taiyaki.\n\nTim",
                language=l_english,
            ),
            item_text(
                item_id=i_q2_body,
                text_detail="FR Hi O.B.,\n\nMan bun heirloom hell of YOLO iPhone twee. Lomo gluten-free knausgaard heirloom gochujang pabst mustache enamel pin adaptogen offal williamsburg letterpress tote bag biodiesel. Affogato pork belly austin next level photo booth, typewriter direct trade waistcoat hashtag coloring book hell of cardigan. Whatever artisan tofu vice thundercats retro. Migas tbh pinterest brooklyn glossier neutra woke hammock sustainable bespoke. Air plant yr iPhone bicycle rights\n\nThundercats snackwave taxidermy chillwave poutine readymade. Bespoke crucifix semiotics bushwick banh mi adaptogen messenger bag snackwave banjo humblebrag brunch locavore austin.\n\nReadymade lo-fi succulents godard lyft austin narwhal. Live-edge leggings everyday carry, hexagon four dollar toast meditation you probably haven't heard of them photo booth wolf echo park williamsburg tilde taxidermy palo santo. Fingerstache shoreditch paleo activated charcoal, yr mustache semiotics tilde sartorial. Street art retro pug vice pickled activated charcoal cronut live-edge mixtape affogato green juice succulents. Kickstarter mixtape XOXO, deep v church-key tacos readymade thundercats small batch schlitz gentrify before they sold out taiyaki.\n\nTim",
                language=l_french,
            ),
            #3
            item_text(item_id=i_q3, text_detail="Question 3", language=l_english),
            item_text(item_id=i_q3, text_detail="FR Question 3", language=l_french),
            item_text(
                item_id=i_q3_subject,
                text_detail="New icing application sugaring methodology",
                language=l_english,
            ),
            item_text(
                item_id=i_q3_subject,
                text_detail="FR New icing application sugaring methodology",
                language=l_french,
            ),
            item_text(
                item_id=i_q3_from,
                text_detail="Det. McNulty (Outdoors Sector Analyst, Rebel Team)",
                language=l_english,
            ),
            item_text(
                item_id=i_q3_from,
                text_detail="FR Det. McNulty (Outdoors Sector Analyst, Rebel Team)",
                language=l_french,
            ),
            item_text(
                item_id=i_q3_to,
                text_detail="O.B Wan (Manager, Rebel Team)",
                language=l_english,
            ),
            item_text(
                item_id=i_q3_to,
                text_detail="FR O.B Wan (Manager, Rebel Team)",
                language=l_french,
            ),
            item_text(
                item_id=i_q3_date, text_detail="Wednesday, October 11", language=l_english
            ),
            item_text(
                item_id=i_q3_date,
                text_detail="FR Wednesday, October 11",
                language=l_french,
            ),
            item_text(
                item_id=i_q3_body,
                text_detail="Hi O.B.,\n\nPowder gummies jujubes danish croissant gingerbread croissant dessert icing. Jelly-o cheesecake sesame snaps dragée lemon drops dragée. Gingerbread powder marshmallow ice cream pie. Muffin danish tootsie roll. Pudding tart chocolate cake sesame snaps lollipop dragée. Tiramisu bonbon jelly-o soufflé brownie caramels. Fruitcake halvah liquorice pie marzipan carrot cake cookie. Fruitcake ice cream chocolate bar jelly beans pudding. Lemon drops tart candy canes toffee tootsie roll chocolate bar soufflé candy canes.\n\nDragée cake halvah. Muffin jelly-o tart wafer chocolate cake topping soufflé gummi bears. Pastry gummi bears ice cream. Cake pudding bear claw pudding. Cake cupcake caramels danish soufflé dessert. Gingerbread powder marshmallow ice cream pie.\n\nFruitcake halvah liquorice pie marzipan carrot cake cookie. Fruitcake ice cream chocolate bar?\n\nDet. McNulty",
                language=l_english,
            ),
            item_text(
                item_id=i_q3_body,
                text_detail="FR Hi O.B.,\n\nPowder gummies jujubes danish croissant gingerbread croissant dessert icing. Jelly-o cheesecake sesame snaps dragée lemon drops dragée. Gingerbread powder marshmallow ice cream pie. Muffin danish tootsie roll. Pudding tart chocolate cake sesame snaps lollipop dragée. Tiramisu bonbon jelly-o soufflé brownie caramels. Fruitcake halvah liquorice pie marzipan carrot cake cookie. Fruitcake ice cream chocolate bar jelly beans pudding. Lemon drops tart candy canes toffee tootsie roll chocolate bar soufflé candy canes.\n\nDragée cake halvah. Muffin jelly-o tart wafer chocolate cake topping soufflé gummi bears. Pastry gummi bears ice cream. Cake pudding bear claw pudding. Cake cupcake caramels danish soufflé dessert. Gingerbread powder marshmallow ice cream pie.\n\nFruitcake halvah liquorice pie marzipan carrot cake cookie. Fruitcake ice cream chocolate bar?\n\nDet. McNulty",
                language=l_french,
            ),
            #4
            item_text(item_id=i_q4, text_detail="Question 4", language=l_english),
            item_text(item_id=i_q4, text_detail="FR Question 4", language=l_french),
            item_text(
                item_id=i_q4_subject,
                text_detail="Working with Ska",
                language=l_english,
            ),
            item_text(
                item_id=i_q4_subject,
                text_detail="FR Working with Ska",
                language=l_french,
            ),
            item_text(
                item_id=i_q4_from,
                text_detail="Sterling Archer (Fencing Support Assistant, Rebel Team)",
                language=l_english,
            ),
            item_text(
                item_id=i_q4_from,
                text_detail="FR Sterling Archer (Fencing Support Assistant, Rebel Team)",
                language=l_french,
            ),
            item_text(
                item_id=i_q4_to,
                text_detail="O.B Wan (Manager, Rebel Team)",
                language=l_english,
            ),
            item_text(
                item_id=i_q4_to,
                text_detail="FR O.B Wan (Manager, Rebel Team)",
                language=l_french,
            ),
            item_text(
                item_id=i_q4_date, text_detail="Wednesday, October 11", language=l_english
            ),
            item_text(
                item_id=i_q4_date,
                text_detail="FR Wednesday, October 11",
                language=l_french,
            ),
            item_text(
                item_id=i_q4_body,
                text_detail="Hi O.B.,\n\nI’m tired of listening to Ska. Lately, I’ve noticed Cloud bread kickstarter tumeric gastropub. Af gluten-free tofu flexitarian. Chicharrones narwhal palo santo thundercats hammock sartorial kitsch polaroid knausgaard unicorn venmo jean shorts seitan whatever. Banh mi readymade shabby chic biodiesel trust fund.\n\nHoodie activated charcoal snackwave. Taxidermy PBR&B lyft, prism swag food truck YOLO street art. Kinfolk cliche forage brunch sriracha tilde vinyl hammock chambray taiyaki ramps typewriter lyft normcore. Oh.\n\nSterling",
                language=l_english,
            ),
            item_text(
                item_id=i_q4_body,
                text_detail="FR Hi O.B.,\n\nI’m tired of listening to Ska. Lately, I’ve noticed Cloud bread kickstarter tumeric gastropub. Af gluten-free tofu flexitarian. Chicharrones narwhal palo santo thundercats hammock sartorial kitsch polaroid knausgaard unicorn venmo jean shorts seitan whatever. Banh mi readymade shabby chic biodiesel trust fund.\n\nHoodie activated charcoal snackwave. Taxidermy PBR&B lyft, prism swag food truck YOLO street art. Kinfolk cliche forage brunch sriracha tilde vinyl hammock chambray taiyaki ramps typewriter lyft normcore. Oh.\n\nSterling",
                language=l_french,
            ),
        ]
    )


def destroy_pizza_test(apps, schema_editor):
    # get models
    language = apps.get_model("custom_models", "Language")
    item_type = apps.get_model("custom_models", "ItemType")
    item = apps.get_model("custom_models", "Item")
    item_text = apps.get_model("custom_models", "ItemText")
    question_type = apps.get_model("custom_models", "QuestionType")
    question = apps.get_model("custom_models", "Question")

    # get db alias
    db_alias = schema_editor.connection.alias

    # lookup languages; do not use bulk_create since we need these objects later on
    l_english = (
        language.objects.using(db_alias)
        .filter(ISO_Code_1="en", ISO_Code_2="en-ca")
        .last()
    )
    l_french = (
        language.objects.using(db_alias)
        .filter(ISO_Code_1="fr", ISO_Code_2="fr-ca")
        .last()
    )
    pizza_test_item_id = (
        item_text.objects.using(db_alias)
        .filter(text_detail="Pizza Test", language=l_english)
        .last()
        .item_id
    )

    # getting item types
    it_question = item_type.objects.using(db_alias).filter(type_desc="question").last()
    it_subject = item_type.objects.using(db_alias).filter(type_desc="subject").last()
    it_from = item_type.objects.using(db_alias).filter(type_desc="from").last()
    it_to = item_type.objects.using(db_alias).filter(type_desc="to").last()
    it_date = item_type.objects.using(db_alias).filter(type_desc="date").last()
    it_body = item_type.objects.using(db_alias).filter(type_desc="body").last()

    # getting question types
    qt_email = (
        question_type.objects.using(db_alias).filter(question_type_desc="email").last()
    )

    # get item objects
    i_q1 = (
        item.objects.using(db_alias)
        .filter(parent_id=pizza_test_item_id, item_type_id=it_question, order=1)
        .last()
    )
    i_q1_subject = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q1, item_type_id=it_subject, order=1)
        .last()
    )
    i_q1_from = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q1, item_type_id=it_from, order=2)
        .last()
    )
    i_q1_to = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q1, item_type_id=it_to, order=3)
        .last()
    )
    i_q1_date = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q1, item_type_id=it_date, order=4)
        .last()
    )
    i_q1_body = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q1, item_type_id=it_body, order=5)
        .last()
    )

    i_q2 = (
        item.objects.using(db_alias)
        .filter(parent_id=pizza_test_item_id, item_type_id=it_question, order=2)
        .last()
    )
    i_q2_subject = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q2, item_type_id=it_subject, order=1)
        .last()
    )
    i_q2_from = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q2, item_type_id=it_from, order=2)
        .last()
    )
    i_q2_to = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q2, item_type_id=it_to, order=3)
        .last()
    )
    i_q2_date = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q2, item_type_id=it_date, order=4)
        .last()
    )
    i_q2_body = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q2, item_type_id=it_body, order=5)
        .last()
    )

    i_q3 = (
        item.objects.using(db_alias)
        .filter(parent_id=pizza_test_item_id, item_type_id=it_question, order=3)
        .last()
    )
    i_q3_subject = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q3, item_type_id=it_subject, order=1)
        .last()
    )
    i_q3_from = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q3, item_type_id=it_from, order=2)
        .last()
    )
    i_q3_to = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q3, item_type_id=it_to, order=3)
        .last()
    )
    i_q3_date = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q3, item_type_id=it_date, order=4)
        .last()
    )
    i_q3_body = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q3, item_type_id=it_body, order=5)
        .last()
    )

    i_q4 = (
        item.objects.using(db_alias)
        .filter(parent_id=pizza_test_item_id, item_type_id=it_question, order=3)
        .last()
    )
    i_q4_subject = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q4, item_type_id=it_subject, order=1)
        .last()
    )
    i_q4_from = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q4, item_type_id=it_from, order=2)
        .last()
    )
    i_q4_to = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q4, item_type_id=it_to, order=3)
        .last()
    )
    i_q4_date = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q4, item_type_id=it_date, order=4)
        .last()
    )
    i_q4_body = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q4, item_type_id=it_body, order=5)
        .last()
    )

    # destroy questions
    question.objects.using(db_alias).filter(
        question_type_id=qt_email, item_id=i_q1
    ).delete()
    question.objects.using(db_alias).filter(
        question_type_id=qt_email, item_id=i_q2
    ).delete()
    question.objects.using(db_alias).filter(
        question_type_id=qt_email, item_id=i_q3
    ).delete()
    question.objects.using(db_alias).filter(
        question_type_id=qt_email, item_id=i_q4
    ).delete()

    # destroy item_text
    item_text.objects.using(db_alias).filter(item_id=i_q1, language=l_english).delete()
    item_text.objects.using(db_alias).filter(item_id=i_q1, language=l_french).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q1_subject, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q1_subject, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q1_from, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q1_from, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q1_to, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q1_to, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q1_date, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q1_date, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q1_body, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q1_body, language=l_french
    ).delete()

    item_text.objects.using(db_alias).filter(item_id=i_q2, language=l_english).delete()
    item_text.objects.using(db_alias).filter(item_id=i_q2, language=l_french).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q2_subject, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q2_subject, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q2_from, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q2_from, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q2_to, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q2_to, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q2_date, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q2_date, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q2_body, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q2_body, language=l_french
    ).delete()

    item_text.objects.using(db_alias).filter(item_id=i_q3, language=l_english).delete()
    item_text.objects.using(db_alias).filter(item_id=i_q3, language=l_french).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q3_subject, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q3_subject, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q3_from, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q3_from, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q3_to, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q3_to, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q3_date, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q3_date, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q3_body, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q3_body, language=l_french
    ).delete()

    item_text.objects.using(db_alias).filter(item_id=i_q4, language=l_english).delete()
    item_text.objects.using(db_alias).filter(item_id=i_q4, language=l_french).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q4_subject, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q4_subject, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q4_from, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q4_from, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q4_to, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q4_to, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q4_date, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q4_date, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q4_body, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q4_body, language=l_french
    ).delete()

    # destroy items; inverted order as children must be deleted first
    i_q4_body.delete()
    i_q4_date.delete()
    i_q4_to.delete()
    i_q4_from.delete()
    i_q4_subject.delete()
    i_q4.delete()
    i_q3_body.delete()
    i_q3_date.delete()
    i_q3_to.delete()
    i_q3_from.delete()
    i_q3_subject.delete()
    i_q3.delete()
    i_q2_body.delete()
    i_q2_date.delete()
    i_q2_to.delete()
    i_q2_from.delete()
    i_q2_subject.delete()
    i_q2.delete()
    i_q1_body.delete()
    i_q1_date.delete()
    i_q1_to.delete()
    i_q1_from.delete()
    i_q1_subject.delete()
    i_q1.delete()


class Migration(migrations.Migration):

    dependencies = [("custom_models", "0017_upload_team_info_tree_view_markdown")]

    operations = [migrations.RunPython(upload_pizza_test, destroy_pizza_test)]

