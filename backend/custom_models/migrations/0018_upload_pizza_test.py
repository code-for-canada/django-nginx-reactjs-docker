# Generated by Django 2.1.7 on 2019-05-30 14:07
# Edited by Francis Normand to upload the pizza test

from django.db import migrations

ORIGINAL_ITEM_NAME_EN = "Pizza Test"
NEW_ITEM_NAME_EN = "email"
ORIGINAL_ITEM_NAME_FR = "FR Pizza Test"
NEW_ITEM_NAME_FR = "email"


def upload_pizza_test(apps, schema_editor):
    # get models
    language = apps.get_model("custom_models", "Language")
    item_type = apps.get_model("custom_models", "ItemType")
    item = apps.get_model("custom_models", "Item")
    item_text = apps.get_model("custom_models", "ItemText")
    question_type = apps.get_model("custom_models", "QuestionType")
    question = apps.get_model("custom_models", "Question")

    # get db alias
    db_alias = schema_editor.connection.alias

    # lookup languages; do not use bulk_create since we need these objects later on
    l_english = (
        language.objects.using(db_alias)
        .filter(ISO_Code_1="en", ISO_Code_2="en-ca")
        .last()
    )
    l_french = (
        language.objects.using(db_alias)
        .filter(ISO_Code_1="fr", ISO_Code_2="fr-ca")
        .last()
    )
    pizza_test_item_id = (
        item_text.objects.using(db_alias)
        .filter(text_detail="Pizza Test", language=l_english)
        .last()
        .item_id
    )

    # getting item types
    it_question = item_type.objects.using(db_alias).filter(type_desc="question").last()
    it_subject = item_type.objects.using(db_alias).filter(type_desc="subject").last()
    it_from = item_type.objects.using(db_alias).filter(type_desc="from").last()
    it_to = item_type.objects.using(db_alias).filter(type_desc="to").last()
    it_date = item_type.objects.using(db_alias).filter(type_desc="date").last()
    it_body = item_type.objects.using(db_alias).filter(type_desc="body").last()

    # getting question types
    qt_email = (
        question_type.objects.using(db_alias).filter(question_type_desc="email").last()
    )

    # create items; do not use bulk_create since we need these objects later on
    # question 1 items
    i_q1 = item(parent_id=pizza_test_item_id, item_type_id=it_question, order=1)
    i_q1.save()

    i_q1_subject = item(parent_id=i_q1, item_type_id=it_subject, order=1)
    i_q1_subject.save()

    i_q1_from = item(parent_id=i_q1, item_type_id=it_from, order=2)
    i_q1_from.save()

    i_q1_to = item(parent_id=i_q1, item_type_id=it_to, order=3)
    i_q1_to.save()

    i_q1_date = item(parent_id=i_q1, item_type_id=it_date, order=4)
    i_q1_date.save()

    i_q1_body = item(parent_id=i_q1, item_type_id=it_body, order=5)
    i_q1_body.save()

    # bulk create questions
    question.objects.using(db_alias).bulk_create(
        [question(question_type_id=qt_email, item_id=i_q1)]
    )

    # bulk create item_text
    item_text.objects.using(db_alias).bulk_create(
        [
            item_text(item_id=i_q1, text_detail="Question 1", language=l_english),
            item_text(item_id=i_q1, text_detail="FR Question 1", language=l_french),
            item_text(
                item_id=i_q1_subject,
                text_detail="Bad experience with Serv",
                language=l_english,
            ),
            item_text(
                item_id=i_q1_subject,
                text_detail="Mauvaise expérience avec Serv",
                language=l_french,
            ),
            item_text(
                item_id=i_q1_from,
                text_detail="Serge Duplessis (Quality Control Analyst, Quality Assurance Team)",
                language=l_english,
            ),
            item_text(
                item_id=i_q1_from,
                text_detail="Serge Duplessis (analyste de l’assurance de la qualité, Équipe de l’assurance de la qualité)",
                language=l_french,
            ),
            item_text(
                item_id=i_q1_to,
                text_detail="Claude Huard (Manager, Quality Assurance Team)",
                language=l_english,
            ),
            item_text(
                item_id=i_q1_to,
                text_detail="Claude Huard (gestionnaire, Équipe de l’assurance de la qualité)",
                language=l_french,
            ),
            item_text(
                item_id=i_q1_date,
                text_detail="Thursday, November 3",
                language=l_english,
            ),
            item_text(
                item_id=i_q1_date, text_detail="Le jeudi 3 novembre", language=l_french
            ),
            item_text(
                item_id=i_q1_body,
                text_detail="Hello Claude,\n\nAs you are settling into this position, I was hoping to share with you some of my thoughts about the proposed changes to our service requests and documentation practices.\n\nI have been working on the Quality Assurance team for over 12 years. I feel that, overall, we are quite successful in understanding and processing service requests. Switching to an automated, computerized system would take a very long time to adapt to and could jeopardize the quality of our service. For example, having a face-to-face or telephone conversation with a client can help us better understand the client’s issues in more depth because it allows us to ask probing questions and receive important information related to each case. By buying into this new technology, we risk having more IT problems and unexpected delays in the long-run.\n\nI have voiced my opinion in previous meetings but I do not feel that my opinions matter. Everyone else has been on the team for less than two years and I feel ignored because I’m the oldest member on the team. I urge you to consider my opinion so that we do not make a costly mistake.\n\nSerge",
                language=l_english,
            ),
            item_text(
                item_id=i_q1_body,
                text_detail="Bonjour Claude.Alors que vous vous familiarisez avec vos nouvelles fonctions, j’aimerais vous faire part de certaines de mes opinions concernant les changements que l’on propose d’apporter à notre système de demandes de services et à nos pratiques en matière de documentation.\n\nJe travaille au sein de l’Équipe de l’assurance de la qualité depuis plus de 12 ans. J’estime que, dans l’ensemble, nous avons bien réussi à comprendre et à traiter les demandes de service. Le passage à un système automatisé et informatisé prendrait beaucoup de temps avant qu’on s’y adapte et pourrait compromettre la qualité de notre service. Par exemple, une conversation en personne ou par téléphone avec un client peut nous aider à mieux comprendre ses problèmes, car cela nous permet de poser des questions d’approfondissement et d’obtenir des renseignements importants sur chaque cas. En adoptant cette nouvelle technologie, nous risquons d’avoir plus de problèmes de TI et des retards imprévus à long terme.\n\nJ’ai déjà exprimé mon opinion lors de réunions précédentes, mais je n’ai pas l’impression que mes opinions comptent. Tous les autres sont dans l’équipe depuis moins de deux ans et je me sens ignoré parce que je suis le plus âgé de l’équipe. Je vous encourage à tenir compte de mon opinion afin que nous ne commettions pas une erreur coûteuse. \n\nSerge",
                language=l_french,
            ),
        ]
    )


def destroy_pizza_test(apps, schema_editor):
    # get models
    language = apps.get_model("custom_models", "Language")
    item_type = apps.get_model("custom_models", "ItemType")
    item = apps.get_model("custom_models", "Item")
    item_text = apps.get_model("custom_models", "ItemText")
    question_type = apps.get_model("custom_models", "QuestionType")
    question = apps.get_model("custom_models", "Question")

    # get db alias
    db_alias = schema_editor.connection.alias

    # lookup languages; do not use bulk_create since we need these objects later on
    l_english = (
        language.objects.using(db_alias)
        .filter(ISO_Code_1="en", ISO_Code_2="en-ca")
        .last()
    )
    l_french = (
        language.objects.using(db_alias)
        .filter(ISO_Code_1="fr", ISO_Code_2="fr-ca")
        .last()
    )
    pizza_test_item_id = (
        item_text.objects.using(db_alias)
        .filter(text_detail="Pizza Test", language=l_english)
        .last()
        .item_id
    )

    # getting item types
    it_question = item_type.objects.using(db_alias).filter(type_desc="question").last()
    it_subject = item_type.objects.using(db_alias).filter(type_desc="subject").last()
    it_from = item_type.objects.using(db_alias).filter(type_desc="from").last()
    it_to = item_type.objects.using(db_alias).filter(type_desc="to").last()
    it_date = item_type.objects.using(db_alias).filter(type_desc="date").last()
    it_body = item_type.objects.using(db_alias).filter(type_desc="body").last()

    # getting question types
    qt_email = (
        question_type.objects.using(db_alias).filter(question_type_desc="email").last()
    )

    # get item objects
    i_q1 = (
        item.objects.using(db_alias)
        .filter(parent_id=pizza_test_item_id, item_type_id=it_question, order=1)
        .last()
    )
    i_q1_subject = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q1, item_type_id=it_subject, order=1)
        .last()
    )
    i_q1_from = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q1, item_type_id=it_from, order=2)
        .last()
    )
    i_q1_to = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q1, item_type_id=it_to, order=3)
        .last()
    )
    i_q1_date = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q1, item_type_id=it_date, order=4)
        .last()
    )
    i_q1_body = (
        item.objects.using(db_alias)
        .filter(parent_id=i_q1, item_type_id=it_body, order=5)
        .last()
    )

    # destroy questions
    question.objects.using(db_alias).filter(
        question_type_id=qt_email, item_id=i_q1
    ).delete()

    # destroy item_text
    item_text.objects.using(db_alias).filter(item_id=i_q1, language=l_english).delete()
    item_text.objects.using(db_alias).filter(item_id=i_q1, language=l_french).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q1_subject, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q1_subject, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q1_from, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q1_from, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q1_to, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q1_to, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q1_date, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q1_date, language=l_french
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q1_body, language=l_english
    ).delete()
    item_text.objects.using(db_alias).filter(
        item_id=i_q1_body, language=l_french
    ).delete()

    # destroy items; inverted order as children must be deleted first
    i_q1_body.delete()
    i_q1_date.delete()
    i_q1_to.delete()
    i_q1_from.delete()
    i_q1_subject.delete()
    i_q1.delete()


class Migration(migrations.Migration):

    dependencies = [("custom_models", "0017_upload_team_info_tree_view_markdown")]

    operations = [migrations.RunPython(upload_pizza_test, destroy_pizza_test)]

